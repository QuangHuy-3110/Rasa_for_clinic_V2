from typing import Any, Text, Dict, List
from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher
from rasa_sdk.events import SlotSet
from rasa_sdk.forms import FormValidationAction
import mysql.connector
from mysql.connector import Error
from datetime import datetime
import os
from dotenv import load_dotenv
import re  # Th√™m ƒë·ªÉ parse payload fallback

# Load file .env
load_dotenv()

# K·∫øt n·ªëi DB t·ª´ .env
DB_CONFIG = {
    'host': os.getenv('DB_HOST'),
    'user': os.getenv('DB_USER'),
    'password': os.getenv('DB_PASSWORD'),
    'database': os.getenv('DB_NAME')
}

if None in DB_CONFIG.values():
    raise ValueError("Thi·∫øu th√¥ng tin k·∫øt n·ªëi DB trong file .env.")

# Keywords ƒë·ªÉ detect wrong input (m·ªü r·ªông theo data)
WRONG_INPUT_KEYWORDS = {
    'date': ['ƒëau', 'b·ªánh', 'ti√™u ch·∫£y', 's·ªët', 'ho', 'm√¥ t·∫£', 'tri·ªáu ch·ª©ng'],
    'specialty': ['ƒëau', 'b·ªánh', 'ti√™u ch·∫£y', 'ng√†y', 'th·ªùi gian'],
    'doctor_name': ['ƒëau', 'b·ªánh', 'ng√†y', 'th·ªùi gian', 'n·ªôi khoa'],
    'appointment_time': ['ƒëau', 'b·ªánh', 'ng√†y', 'ƒëau b·ª•ng', 's√°ng'],
    'decription': ['ng√†y', 'th·ªùi gian', 'b√°c sƒ©', 'chuy√™n khoa']
}

# Global variable cho m√£ b·ªánh nh√¢n (c√≥ th·ªÉ set ƒë·ªông t·ª´ slot ho·∫∑c config sau)
MA_BN_GLOBAL = "BN0001"  # V√≠ d·ª•: "BN001", thay b·∫±ng gi√° tr·ªã th·ª±c t·∫ø ho·∫∑c t·ª´ tracker.get_slot("patient_id")

class ValidateRecommendDoctorForm(FormValidationAction):
    def name(self) -> Text:
        return "validate_recommend_doctor_form"

    def validate_symptoms(
        self,
        slot_value: Any,
        dispatcher: CollectingDispatcher,
        tracker: Tracker,
        domain: Dict[Text, Any],
    ) -> Dict[Text, Any]:
        symptoms = tracker.latest_message.get('entities', [])
        symptom_list = [e['value'] for e in symptoms if e['entity'] == 'symptom']
        return {"symptoms": symptom_list}

class ActionRecommendDoctor(Action):
    def name(self) -> Text:
        return "action_recommend_doctor"

    def run(
        self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]
    ) -> List[Dict]:
        symptoms = tracker.get_slot("symptoms") or []
        if not symptoms:
            dispatcher.utter_message(text="Kh√¥ng nh·∫≠n ƒë∆∞·ª£c tri·ªáu ch·ª©ng. H√£y th·ª≠ l·∫°i.")
            return []

        symptom_to_specialty = {
            "ƒëau ƒë·∫ßu": "Th·∫ßn kinh", "ch√≥ng m·∫∑t": "Th·∫ßn kinh", "m·∫•t ng·ªß": "Th·∫ßn kinh", "co gi·∫≠t": "Th·∫ßn kinh",
            "t√™ b√¨ tay ch√¢n": "Th·∫ßn kinh", "r·ªëi lo·∫°n tr√≠ nh·ªõ": "Th·∫ßn kinh", "ƒëau n·ª≠a ƒë·∫ßu": "Th·∫ßn kinh",
            "run tay": "Th·∫ßn kinh", "m·∫•t thƒÉng b·∫±ng": "Th·∫ßn kinh",
            "s·ªët": "N·ªôi khoa", "m·ªát m·ªèi": "N·ªôi khoa", "ho": "N·ªôi khoa", "kh√≥ th·ªü": "N·ªôi khoa",
            "ƒëau ng·ª±c": "N·ªôi khoa", "ƒëau kh·ªõp": "N·ªôi khoa", "ti√™u ch·∫£y": "N·ªôi khoa", "bu·ªìn n√¥n": "N·ªôi khoa",
            "ƒëau b·ª•ng": "N·ªôi khoa", "ch√°n ƒÉn": "N·ªôi khoa",
            "ch·∫•n th∆∞∆°ng": "Ngo·∫°i khoa", "g√£y x∆∞∆°ng": "Ngo·∫°i khoa", "v·∫øt th∆∞∆°ng h·ªü": "Ngo·∫°i khoa",
            "ƒëau l∆∞ng": "Ngo·∫°i khoa", "ƒëau vai g√°y": "Ngo·∫°i khoa", "u b∆∞·ªõu ngo√†i da": "Ngo·∫°i khoa",
            "s∆∞ng t·∫•y": "Ngo·∫°i khoa", "ƒëau sau ph·∫´u thu·∫≠t": "Ngo·∫°i khoa",
            "s·ªët ·ªü tr·∫ª em": "Nhi khoa", "ho ·ªü tr·∫ª em": "Nhi khoa", "n√¥n tr·ªõ": "Nhi khoa",
            "kh√≤ kh√®": "Nhi khoa", "bi·∫øng ƒÉn": "Nhi khoa", "ti√™u ch·∫£y ·ªü tr·∫ª em": "Nhi khoa",
            "ph√°t ban": "Nhi khoa", "s·ªï m≈©i": "Nhi khoa",
            "tr·ªÖ kinh": "S·∫£n khoa", "ƒëau b·ª•ng d∆∞·ªõi": "S·∫£n khoa", "ra kh√≠ h∆∞ b·∫•t th∆∞·ªùng": "S·∫£n khoa",
            "ch·∫£y m√°u √¢m ƒë·∫°o": "S·∫£n khoa", "·ªëm ngh√©n": "S·∫£n khoa", "ƒëau l∆∞ng khi mang thai": "S·∫£n khoa",
            "r·ªëi lo·∫°n kinh nguy·ªát": "S·∫£n khoa", "nghi ng·ªù mang thai": "S·∫£n khoa",
            "ƒëau rƒÉng": "RƒÉng H√†m M·∫∑t", "s∆∞ng n∆∞·ªõu": "RƒÉng H√†m M·∫∑t", "h√¥i mi·ªáng": "RƒÉng H√†m M·∫∑t",
            "ch·∫£y m√°u ch√¢n rƒÉng": "RƒÉng H√†m M·∫∑t", "vi√™m l·ª£i": "RƒÉng H√†m M·∫∑t", "s√¢u rƒÉng": "RƒÉng H√†m M·∫∑t",
            "nh·ª©c rƒÉng": "RƒÉng H√†m M·∫∑t", "h√†m l·ªách": "RƒÉng H√†m M·∫∑t",
        }

        specialties = set()
        for symptom in symptoms:
            specialty = symptom_to_specialty.get(symptom.lower(), "T·ªïng qu√°t")
            specialties.add(specialty)

        suggested_specialty = ", ".join(specialties) if specialties else "T·ªïng qu√°t"

        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor(dictionary=True)
            placeholders = ','.join(['%s'] * len(specialties))
            query = f"""
            SELECT bs.maBS, bs.tenBS, ck.tenCK, bs.sdtBS
            FROM bacsi bs
            JOIN chuyenmon cm ON bs.maBS = cm.maBS
            JOIN chuyenkhoa ck ON cm.maCK = ck.maCK
            WHERE ck.tenCK IN ({placeholders})
            """
            cursor.execute(query, tuple(specialties))
            doctors = cursor.fetchall()
            cursor.close()
            conn.close()
        except Error as e:
            dispatcher.utter_message(text=f"L·ªói k·∫øt n·ªëi DB: {e}")
            return []

        if not doctors:
            dispatcher.utter_message(text="R·∫•t ti·∫øc, kh√¥ng t√¨m th·∫•y b√°c sƒ© ph√π h·ª£p.")
            return [SlotSet("specialty_suggested", None)]

        dispatcher.utter_message(text=f"D·ª±a tr√™n tri·ªáu ch·ª©ng, t√¥i ƒë·ªÅ xu·∫•t chuy√™n khoa {suggested_specialty}. D∆∞·ªõi ƒë√¢y l√† danh s√°ch b√°c sƒ© ph√π h·ª£p:")
        for doc in doctors:
            doc_card = f"ü©∫ **B√°c sƒ© {doc['tenBS']}** - Chuy√™n khoa: {doc['tenCK']} - Kinh nghi·ªám: 10 nƒÉm - Li√™n h·ªá: {doc['sdtBS']}"
            dispatcher.utter_message(
                text=doc_card,
                buttons=[{
                    "title": "ƒê·∫∑t l·ªãch", 
                    "payload": f"/book_with_doctor{{\"doctor_id\":\"{doc['maBS']}\", \"specialty\":\"{doc['tenCK']}\"}}"
                }]
            )

        return [SlotSet("specialty_suggested", suggested_specialty),
                SlotSet("current_task", None),
                SlotSet("symptoms", None),
                SlotSet("decription", None)]

class ActionBookWithDoctor(Action):
    def name(self) -> Text:
        return "action_book_with_doctor"

    def run(
        self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]
    ) -> List[Dict]:
        # Extract entities t·ª´ latest_message
        entities = tracker.latest_message.get('entities', [])
        doctor_id = next((e['value'] for e in entities if e['entity'] == 'doctor_id'), None)
        specialty = next((e['value'] for e in entities if e['entity'] == 'specialty'), None)
        
        # Fallback parse th·ªß c√¥ng n·∫øu entity fail (t·ª´ text payload)
        if not doctor_id or not specialty:
            text = tracker.latest_message.get('text', '')
            match = re.search(r'"doctor_id":"(BS\d+)"\s*,\s*"specialty":"([^"]+)"', text)
            if match:
                doctor_id, specialty = match.groups()

        if not doctor_id:
            dispatcher.utter_message(text="Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ID b√°c sƒ© t·ª´ l·ª±a ch·ªçn. H√£y th·ª≠ l·∫°i.")
            return []

        # Query DB l·∫•y tenBS v√† verify specialty
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor(dictionary=True)
            query = """
            SELECT tenBS, ck.tenCK as specialty 
            FROM bacsi bs 
            JOIN chuyenmon cm ON bs.maBS = cm.maBS 
            JOIN chuyenkhoa ck ON cm.maCK = ck.maCK 
            WHERE bs.maBS = %s
            """
            cursor.execute(query, (doctor_id,))
            doctor = cursor.fetchone()
            cursor.close()
            conn.close()
        except Error as e:
            dispatcher.utter_message(text=f"L·ªói k·∫øt n·ªëi DB: {e}")
            return []

        if not doctor:
            dispatcher.utter_message(text="Kh√¥ng t√¨m th·∫•y b√°c sƒ© v·ªõi ID n√†y.")
            return []

        doctor_name = doctor['tenBS']
        final_specialty = specialty or doctor['specialty'] or tracker.get_slot("specialty_suggested")

        # RESET slots l·ªôn x·ªôn tr∆∞·ªõc (bao g·ªìm date, time, decription)
        events = [
            SlotSet("doctor_name", None),
            SlotSet("specialty", None),
            SlotSet("date", None),
            SlotSet("appointment_time", None),
            SlotSet("decription", None)
        ]
        
        # Set ƒë√∫ng
        events += [
            SlotSet("doctor_name", doctor_name),
            SlotSet("specialty", final_specialty),
            SlotSet("current_task", "book_appointment")
        ]
        
        # Utter x√°c nh·∫≠n
        dispatcher.utter_message(
            text=f"B·∫°n ƒë√£ ch·ªçn ƒë·∫∑t l·ªãch v·ªõi b√°c sƒ© **{doctor_name}** (chuy√™n khoa {final_specialty}). B√¢y gi·ªù, h√£y cung c·∫•p ng√†y h·∫πn (DD/MM/YYYY)."
        )
        
        return events

class ValidateBookAppointmentForm(FormValidationAction):
    def name(self) -> Text:
        return "validate_book_appointment_form"

    def _detect_wrong_input(self, slot_name: str, slot_value: str) -> bool:
        """Check n·∫øu input match keywords c·ªßa slot kh√°c"""
        input_lower = slot_value.lower()
        keywords = WRONG_INPUT_KEYWORDS.get(slot_name, [])
        return any(kw in input_lower for kw in keywords)

    def validate_date(
        self, slot_value: Any, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]
    ) -> Dict[Text, Any]:
        if not slot_value:
            dispatcher.utter_message(text="Vui l√≤ng cung c·∫•p ng√†y h·∫πn.")
            return {"date": None}

        date_input = str(slot_value).strip()
        if self._detect_wrong_input('date', date_input):
            dispatcher.utter_message(text="T√¥i nghƒ© b·∫°n ƒëang m√¥ t·∫£ b·ªánh, nh∆∞ng hi·ªán t·∫°i t√¥i c·∫ßn ng√†y h·∫πn tr∆∞·ªõc. Vui l√≤ng nh·∫≠p ng√†y theo ƒë·ªãnh d·∫°ng DD/MM/YYYY (v√≠ d·ª•: 15/10/2025).")
            return {"date": None}

        try:
            parsed_date = datetime.strptime(date_input, '%d/%m/%Y')
        except ValueError:
            dispatcher.utter_message(text="Ng√†y b·∫°n nh·∫≠p kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p theo ƒë·ªãnh d·∫°ng DD/MM/YYYY.")
            return {"date": None}

        today = datetime.now().date()
        if parsed_date.date() < today:
            dispatcher.utter_message(text="Ng√†y h·∫πn ph·∫£i trong t∆∞∆°ng lai. Vui l√≤ng ch·ªçn ng√†y kh√°c.")
            return {"date": None}

        return {"date": date_input}

    def validate_appointment_time(
        self, slot_value: Any, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]
    ) -> Dict[Text, Any]:
        if not slot_value:
            dispatcher.utter_message(text="Vui l√≤ng cung c·∫•p th·ªùi gian h·∫πn.")
            return {"appointment_time": None}

        time_input = str(slot_value).strip()
        if self._detect_wrong_input('appointment_time', time_input):
            dispatcher.utter_message(text="ƒê√≥ c√≥ v·∫ª l√† th√¥ng tin kh√°c (nh∆∞ ng√†y ho·∫∑c m√¥ t·∫£). Vui l√≤ng nh·∫≠p th·ªùi gian theo ƒë·ªãnh d·∫°ng HH:MM (v√≠ d·ª•: 14:30).")
            return {"appointment_time": None}

        try:
            parsed_time = datetime.strptime(time_input, '%H:%M')
            hour = parsed_time.hour
            if not (8 <= hour < 17):
                dispatcher.utter_message(text="Th·ªùi gian h·∫πn ph·∫£i trong gi·ªù l√†m vi·ªác (8:00 - 17:00). Vui l√≤ng ch·ªçn l·∫°i.")
                return {"appointment_time": None}
        except ValueError:
            dispatcher.utter_message(text="Th·ªùi gian b·∫°n nh·∫≠p kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p theo ƒë·ªãnh d·∫°ng HH:MM.")
            return {"appointment_time": None}

        return {"appointment_time": time_input}

    def validate_decription(
        self, slot_value: Any, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]
    ) -> Dict[Text, Any]:
        """Validate m√¥ t·∫£ + RE-SET t·∫•t c·∫£ required slots kh√°c ƒë·ªÉ prevent override t·ª´ extraction"""
        if not slot_value:
            dispatcher.utter_message(text="Vui l√≤ng cung c·∫•p m√¥ t·∫£ chi ti·∫øt v·ªÅ t√¨nh tr·∫°ng c·ªßa b·∫°n.")
            return {"decription": None}

        desc_input = str(slot_value).strip()
        if self._detect_wrong_input('decription', desc_input):
            dispatcher.utter_message(text="ƒê√≥ c√≥ v·∫ª l√† th√¥ng tin kh√°c (nh∆∞ ng√†y ho·∫∑c b√°c sƒ©). Vui l√≤ng m√¥ t·∫£ b·ªánh chi ti·∫øt.")
            return {"decription": None}

        if len(desc_input) < 5:
            dispatcher.utter_message(text="M√¥ t·∫£ qu√° ng·∫Øn. Vui l√≤ng cung c·∫•p th√™m chi ti·∫øt.")
            return {"decription": None}

        # RE-SET t·∫•t c·∫£ required slots kh√°c v·ªÅ gi√° tr·ªã hi·ªán t·∫°i (t·ª´ tracker) ƒë·ªÉ override extraction nh·∫ßm
        # ƒêi·ªÅu n√†y ƒë·∫£m b·∫£o kh√¥ng b·ªã reset sau khi input m√¥ t·∫£
        slot_values = {
            "decription": desc_input,
            "date": tracker.get_slot("date"),
            "specialty": tracker.get_slot("specialty"),
            "doctor_name": tracker.get_slot("doctor_name"),
            "appointment_time": tracker.get_slot("appointment_time")
        }

        # Debug log (b·ªè sau khi test)
        # print(f"[DEBUG] Slots before re-set: {dict(tracker.slots)}")
        # print(f"[DEBUG] Re-setting slots: {slot_values}")

        # Ki·ªÉm tra n·∫øu t·∫•t c·∫£ required ƒë·∫ßy ƒë·ªß tr∆∞·ªõc khi return
        required_slots = ["date", "specialty", "doctor_name", "appointment_time", "decription"]
        if all(slot_values.get(slot) for slot in required_slots):
            # print("[DEBUG] All slots full, form will submit.")
            pass
        else:
            # print("[DEBUG] Some slots still None, form will continue.")
            pass

        return slot_values  # Return dict v·ªõi t·∫•t c·∫£ ƒë·ªÉ re-set

    def validate_specialty(
        self, slot_value: Any, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]
    ) -> Dict[Text, Any]:
        if not slot_value:
            dispatcher.utter_message(text="Vui l√≤ng ch·ªçn chuy√™n khoa.")
            return {"specialty": None}

        specialty_input = str(slot_value).strip().lower()
        if self._detect_wrong_input('specialty', specialty_input):
            dispatcher.utter_message(text="ƒê√≥ c√≥ v·∫ª l√† th√¥ng tin kh√°c (nh∆∞ m√¥ t·∫£ b·ªánh ho·∫∑c ng√†y). Vui l√≤ng nh·∫≠p t√™n chuy√™n khoa (v√≠ d·ª•: N·ªôi khoa).")
            return {"specialty": None}

        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor(dictionary=True)
            cursor.execute("SELECT tenCK FROM chuyenkhoa")
            specialties = [row['tenCK'].lower() for row in cursor.fetchall()]
            cursor.close()
            conn.close()
        except Error as e:
            dispatcher.utter_message(text=f"L·ªói DB: {e}")
            return {"specialty": None}

        if specialty_input not in specialties:
            dispatcher.utter_message(text=f"Chuy√™n khoa '{slot_value}' kh√¥ng c√≥. C√°c chuy√™n khoa c√≥ s·∫µn:")
            for s in specialties[:5]:
                dispatcher.utter_message(text=f"- {s.title()}")
            dispatcher.utter_message(text="Vui l√≤ng ch·ªçn m·ªôt trong s·ªë ch√∫ng.")
            return {"specialty": None}

        return {"specialty": slot_value.title()}

    def validate_doctor_name(
        self, slot_value: Any, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]
    ) -> Dict[Text, Any]:
        if not slot_value:
            dispatcher.utter_message(text="Vui l√≤ng ch·ªçn b√°c sƒ©.")
            return {"doctor_name": None}

        doctor_input = str(slot_value).strip()
        if self._detect_wrong_input('doctor_name', doctor_input):
            dispatcher.utter_message(text="ƒê√≥ c√≥ v·∫ª l√† th√¥ng tin kh√°c. Vui l√≤ng nh·∫≠p t√™n b√°c sƒ© ho·∫∑c ch·ªçn t·ª´ danh s√°ch.")
            return {"doctor_name": None}

        specialty = tracker.get_slot("specialty")
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor(dictionary=True)
            if specialty:
                cursor.execute("""
                    SELECT bs.maBS, bs.tenBS, ck.tenCK, bs.sdtBS 
                    FROM bacsi bs JOIN chuyenmon cm ON bs.maBS = cm.maBS
                    JOIN chuyenkhoa ck ON cm.maCK = ck.maCK WHERE ck.tenCK = %s
                """, (specialty,))
            else:
                cursor.execute("""
                    SELECT bs.maBS, bs.tenBS, ck.tenCK, bs.sdtBS 
                    FROM bacsi bs JOIN chuyenmon cm ON bs.maBS = cm.maBS
                    JOIN chuyenkhoa ck ON cm.maCK = ck.maCK
                """)
            doctors = cursor.fetchall()
            cursor.close()
            conn.close()
        except Error as e:
            dispatcher.utter_message(text=f"L·ªói DB: {e}")
            return {"doctor_name": None}

        matched = [doc for doc in doctors if doctor_input.lower() in doc["tenBS"].lower()]
        if not matched:
            dispatcher.utter_message(text=f"Kh√¥ng t√¨m th·∫•y b√°c sƒ© '{doctor_input}'. C√°c b√°c sƒ© c√≥ s·∫µn:")
            for doc in doctors[:3]:
                dispatcher.utter_message(text=f"- ü©∫ {doc['tenBS']} - {doc['tenCK']} ({doc['sdtBS']})")
            dispatcher.utter_message(text="Vui l√≤ng ch·ªçn m·ªôt trong s·ªë ch√∫ng.")
            return {"doctor_name": None}

        doc = matched[0]
        dispatcher.utter_message(
            text=f"X√°c nh·∫≠n: ü©∫ {doc['tenBS']} - {doc['tenCK']} - {doc['sdtBS']}"
        )
        return {"doctor_name": doc["tenBS"]}

class ActionBookAppointment(Action):
    def name(self) -> Text:
        return "action_book_appointment"

    def run(self, dispatcher, tracker, domain):
        slots = {
            "doctor_name": tracker.get_slot("doctor_name"),
            "specialty": tracker.get_slot("specialty"),
            "date": tracker.get_slot("date"),
            "appointment_time": tracker.get_slot("appointment_time"),
            "decription": tracker.get_slot("decription")
        }
        if not all(slots.values()):
            dispatcher.utter_message(text="Th√¥ng tin ch∆∞a ƒë·∫ßy ƒë·ªß. Vui l√≤ng ho√†n t·∫•t form.")
            return []

        dispatcher.utter_message(
            text=f"X√°c nh·∫≠n: B√°c sƒ© **{slots['doctor_name']}** - {slots['specialty']} - {slots['appointment_time']} ng√†y {slots['date']}. M√¥ t·∫£: {slots['decription']}",
            buttons=[
                {"title": "X√°c nh·∫≠n", "payload": "/affirm"},
                {"title": "H·ªßy", "payload": "/deny"}
            ]
        )
        return []  # Kh√¥ng reset ngay, ch·ªù affirm/deny qua rules

# Ph·∫ßn m·ªõi: Tra c·ª©u th√¥ng tin b√°c sƒ©
class ActionSearchDoctor(Action):
    def name(self) -> Text:
        return "action_search_doctor"

    def run(
        self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]
    ) -> List[Dict]:
        doctor_name_search = tracker.get_slot("doctor_name")  # Reuse doctor_name slot for search
        if not doctor_name_search:
            dispatcher.utter_message(text="Kh√¥ng nh·∫≠n ƒë∆∞·ª£c t√™n b√°c sƒ© ƒë·ªÉ tra c·ª©u. H√£y th·ª≠ l·∫°i.")
            return [SlotSet("doctor_name", None)]

        # Query MySQL ƒë·ªÉ t√¨m b√°c sƒ© matching t√™n (LIKE %name%)
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor(dictionary=True)
            query = """
            SELECT bs.maBS, bs.tenBS, ck.tenCK, bs.sdtBS
            FROM bacsi bs
            JOIN chuyenmon cm ON bs.maBS = cm.maBS
            JOIN chuyenkhoa ck ON cm.maCK = ck.maCK
            WHERE bs.tenBS LIKE %s
            """
            cursor.execute(query, (f"%{doctor_name_search}%",))
            doctors = cursor.fetchall()
            cursor.close()
            conn.close()
        except Error as e:
            dispatcher.utter_message(text=f"L·ªói k·∫øt n·ªëi DB: {e}")
            return [SlotSet("doctor_name", None)]

        if not doctors:
            dispatcher.utter_message(text=f"Kh√¥ng t√¨m th·∫•y b√°c sƒ© n√†o c√≥ t√™n ch·ª©a '{doctor_name_search}'. H√£y th·ª≠ t√™n kh√°c.")
            return [SlotSet("doctor_name", None)]

        dispatcher.utter_message(text=f"T√¨m th·∫•y {len(doctors)} b√°c sƒ© ph√π h·ª£p v·ªõi '{doctor_name_search}':")
        for doc in doctors:
            doc_card = f"""
                - ü©∫ **B√°c sƒ© {doc['tenBS']}**
                - Chuy√™n khoa: {doc['tenCK']}
                - SƒêT: {doc['sdtBS']}
            """
            dispatcher.utter_message(
                text=doc_card,
                buttons=[{"title": "Xem chi ti·∫øt", "payload": f"/view_doctor_detail{{\"doctor_id\":\"{doc['maBS']}\"}}"}]
            )

        return [SlotSet("current_task", None),
                SlotSet("doctor_name", None)]

class ActionViewDoctorDetail(Action):
    def name(self) -> Text:
        return "action_view_doctor_detail"

    def run(
        self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]
    ) -> List[Dict]:
        # L·∫•y doctor_id t·ª´ latest_message entities (gi·∫£ s·ª≠ NLU extract entity doctor_id t·ª´ payload)
        entities = tracker.latest_message.get('entities', [])
        doctor_id = next((e['value'] for e in entities if e['entity'] == 'doctor_id'), None)
        
        if not doctor_id:
            dispatcher.utter_message(text="Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ID b√°c sƒ©. H√£y th·ª≠ l·∫°i.")
            return []

        # Query MySQL ƒë·ªÉ l·∫•y chi ti·∫øt b√°c sƒ© theo maBS (th√™m fields n·∫øu c√≥: email, kinhnghiem, dia_chi, etc.)
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor(dictionary=True)
            query = """
            SELECT bs.maBS, bs.tenBS, ck.tenCK, bs.sdtBS, bs.emailBS
            FROM bacsi bs
            JOIN chuyenmon cm ON bs.maBS = cm.maBS
            JOIN chuyenkhoa ck ON cm.maCK = ck.maCK
            WHERE bs.maBS = %s
            """
            cursor.execute(query, (doctor_id,))
            doctor = cursor.fetchone()
            cursor.close()
            conn.close()
        except Error as e:
            dispatcher.utter_message(text=f"L·ªói k·∫øt n·ªëi DB: {e}")
            return []

        if not doctor:
            dispatcher.utter_message(text="Kh√¥ng t√¨m th·∫•y th√¥ng tin b√°c sƒ©.")
            return []

        # Utter chi ti·∫øt
        detail_text = f"""
        üìã **Chi ti·∫øt B√°c sƒ© {doctor['tenBS']}**
        - M√£ BS: {doctor['maBS']}
        - Chuy√™n khoa: {doctor['tenCK']}
        - SƒêT: {doctor['sdtBS']}
        - Email: {doctor.get('emailBS', 'Ch∆∞a c√≥ th√¥ng tin')}
        - Kinh nghi·ªám: 20 nƒÉm
        - C√°c d·ªãch v·ª• kh√°c: T∆∞ v·∫•n v√† kh√°m chuy√™n s√¢u v·ªÅ {doctor['tenCK']}.

        B·∫°n c√≥ mu·ªën ƒë·∫∑t l·ªãch v·ªõi b√°c sƒ© n√†y kh√¥ng?
        """
        buttons = [
            {"title": "ƒê·∫∑t l·ªãch", "payload": "/book_appointment"},
            {"title": "T√¨m b√°c sƒ© kh√°c", "payload": "/search_doctor_info"}
        ]
        dispatcher.utter_message(text=detail_text, buttons=buttons)

        return []

class ActionSearchSpecialty(Action):
    def name(self) -> Text:
        return "action_search_specialty"

    def run(
        self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]
    ) -> List[Dict]:
        specialty = tracker.get_slot("specialty")
        if not specialty:
            dispatcher.utter_message(text="Vui l√≤ng nh·∫≠p t√™n chuy√™n khoa b·∫°n mu·ªën tra c·ª©u.")
            return [SlotSet("specialty", None)]

        # Query MySQL ƒë·ªÉ l·∫•y m√¥ t·∫£ chuy√™n khoa (gi·∫£ s·ª≠ b·∫£ng chuyenkhoa c√≥ field 'mo_ta' ch·ª©a gi·∫£i th√≠ch b·ªánh ch·ªØa)
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor(dictionary=True)
            query = """
            SELECT tenCK, mo_ta
            FROM chuyenkhoa
            WHERE tenCK = %s
            """
            cursor.execute(query, (specialty,))
            result = cursor.fetchone()
            cursor.close()
            conn.close()
        except Error as e:
            dispatcher.utter_message(text=f"L·ªói k·∫øt n·ªëi DB: {e}")
            return [SlotSet("specialty", None)]

        if not result:
            dispatcher.utter_message(
                text=f"Kh√¥ng t√¨m th·∫•y th√¥ng tin v·ªÅ chuy√™n khoa '{specialty}'. Vui l√≤ng th·ª≠ t√™n kh√°c.",
                buttons=[
                    {"title": "Quay l·∫°i menu", "payload": "/greet"}
                ]
            )
            return [SlotSet("specialty", None)]

        # Hi·ªÉn th·ªã gi·∫£i th√≠ch
        explanation = result.get('mo_ta', f"Chuy√™n khoa {specialty} chuy√™n ch·ªØa c√°c b·ªánh li√™n quan ƒë·∫øn {specialty.lower()}.")
        message_text = f"""
        üìã **Th√¥ng tin chuy√™n khoa {specialty}**
        {explanation}

        B·∫°n c√≥ mu·ªën tra c·ª©u chuy√™n khoa kh√°c kh√¥ng?
        """
        buttons = [
            {"title": "Tra c·ª©u kh√°c", "payload": "/explain_specialty"},
            {"title": "Quay l·∫°i menu", "payload": "/greet"}
        ]
        dispatcher.utter_message(text=message_text, buttons=buttons)

        return [SlotSet("specialty", None)]

class ActionCancelAppointment(Action):
    def name(self) -> Text:
        return "action_cancel_appointment"

    def run(
        self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]
    ) -> List[Dict]:
        SlotSet("current_task", "cancel_appointment")  # Set context
        appointment_date = tracker.get_slot("appointment_date")
        if not appointment_date:
            dispatcher.utter_message(
                text="Vui l√≤ng nh·∫≠p ng√†y b·∫°n mu·ªën h·ªßy l·ªãch h·∫πn (ƒë·ªãnh d·∫°ng DD/MM/YYYY).",
                buttons=[{"title": "Quay l·∫°i menu", "payload": "/greet"}]
            )
            return [SlotSet("appointment_date", None)]

        # Parse ng√†y (gi·∫£ s·ª≠ format %d/%m/%Y)
        try:
            parsed_date = datetime.strptime(appointment_date, '%d/%m/%Y').date()
        except ValueError:
            dispatcher.utter_message(text="Ng√†y kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p theo ƒë·ªãnh d·∫°ng DD/MM/YYYY.")
            return [SlotSet("appointment_date", None)]

        # Query MySQL: L·∫•y danh s√°ch l·ªãch h·∫πn c·ªßa maBN trong ng√†y ƒë√≥ (trang_thai != 'h·ªßy')
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor(dictionary=True)
            query = """
            SELECT lh.maLH, lh.ngaythangnam, lh.khunggio, bs.tenBS
            FROM lichhen lh
            JOIN bacsi bs ON lh.maBS = bs.maBS
            WHERE lh.maBN = %s AND DATE(lh.ngaythangnam) = %s AND lh.trangthai != 'h·ªßy'
            ORDER BY lh.khunggio
            """
            cursor.execute(query, (MA_BN_GLOBAL, parsed_date))
            appointments = cursor.fetchall()
            cursor.close()
            conn.close()
        except Error as e:
            dispatcher.utter_message(text=f"L·ªói k·∫øt n·ªëi DB: {e}")
            return [SlotSet("appointment_date", None)]

        if not appointments:
            dispatcher.utter_message(text=f"Kh√¥ng c√≥ l·ªãch h·∫πn n√†o trong ng√†y {appointment_date}.")
            buttons = [{"title": "Quay l·∫°i menu", "payload": "/greet"}]
            dispatcher.utter_message(text="B·∫°n c√≥ mu·ªën h·ªßy ng√†y kh√°c kh√¥ng?", buttons=buttons)
            return [SlotSet("appointment_date", None)]

        # Hi·ªÉn th·ªã danh s√°ch v·ªõi buttons ch·ªçn
        dispatcher.utter_message(text=f"Danh s√°ch l·ªãch h·∫πn ng√†y {appointment_date}:")
        for appt in appointments:
            appt_text = f"ü©∫ B√°c sƒ© {appt['tenBS']} - Gi·ªù: {appt['khunggio']}"
            dispatcher.utter_message(
                text=appt_text,
                buttons=[
                    {
                        "title": f"Ch·ªçn l·ªãch {appt['khunggio']}",
                        "payload": f"/select_appointment{{\"appointment_id\":\"{appt['maLH']}\"}}"
                    }
                ]
            )

        return [SlotSet("appointment_date", None)]

class ActionConfirmCancel(Action):
    def name(self) -> Text:
        return "action_confirm_cancel"

    def run(
        self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]
    ) -> List[Dict]:
        # L·∫•y maLH t·ª´ latest_message entities (t·ª´ payload ch·ªçn)
        entities = tracker.latest_message.get('entities', [])
        selected_id = next((e['value'] for e in entities if e['entity'] == 'appointment_id'), None)
        
        if not selected_id:
            dispatcher.utter_message(text="Kh√¥ng nh·∫≠n ƒë∆∞·ª£c l·ªãch h·∫πn ƒë·ªÉ h·ªßy. H√£y th·ª≠ l·∫°i.")
            return []

        # X√°c nh·∫≠n h·ªßy
        dispatcher.utter_message(
            text=f"B·∫°n c√≥ ch·∫Øc mu·ªën h·ªßy l·ªãch h·∫πn ID {selected_id}?",
            buttons=[
                {"title": "X√°c nh·∫≠n h·ªßy", "payload": "/affirm"},
                {"title": "H·ªßy b·ªè", "payload": "/deny"}
            ]
        )
        return [SlotSet("selected_appointment_id", selected_id)]

class ActionPerformCancel(Action):
    def name(self) -> Text:
        return "action_perform_cancel"

    def run(
        self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]
    ) -> List[Dict]:
        selected_id = tracker.get_slot("selected_appointment_id")
        if not selected_id:
            dispatcher.utter_message(text="Kh√¥ng c√≥ l·ªãch h·∫πn ƒë∆∞·ª£c ch·ªçn.")
            return []

        # Update DB: Set trang_thai = 'h·ªßy'
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            query = "UPDATE lichhen SET trangthai = 'h·ªßy' WHERE maLH = %s AND maBN = %s"
            cursor.execute(query, (selected_id, MA_BN_GLOBAL))
            conn.commit()
            cursor.close()
            conn.close()
            if cursor.rowcount > 0:
                dispatcher.utter_message(text=f"ƒê√£ h·ªßy th√†nh c√¥ng l·ªãch h·∫πn ID {selected_id}.")
            else:
                dispatcher.utter_message(text="Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn ƒë·ªÉ h·ªßy.")
        except Error as e:
            dispatcher.utter_message(text=f"L·ªói c·∫≠p nh·∫≠t DB: {e}")

        buttons = [{"title": "Quay l·∫°i menu", "payload": "/greet"}]
        dispatcher.utter_message(text="B·∫°n c√≥ mu·ªën h·ªßy l·ªãch kh√°c kh√¥ng?", buttons=buttons)
        return [SlotSet("selected_appointment_id", None),
                SlotSet("current_task", None)]

class ActionSearchPrescription(Action):
    def name(self) -> Text:
        return "action_search_prescription"

    def run(
        self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]
    ) -> List[Dict]:
        prescription_date = tracker.get_slot("prescription_date")
        if not prescription_date:
            dispatcher.utter_message(
                text="Vui l√≤ng nh·∫≠p ng√†y b·∫°n mu·ªën tra c·ª©u toa thu·ªëc (ƒë·ªãnh d·∫°ng DD/MM/YYYY).",
                buttons=[{"title": "Quay l·∫°i menu", "payload": "/greet"}]
            )
            return [SlotSet("prescription_date", None)]

        # Parse ng√†y
        try:
            parsed_date = datetime.strptime(prescription_date, '%d/%m/%Y').date()
        except ValueError:
            dispatcher.utter_message(text="Ng√†y kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p theo ƒë·ªãnh d·∫°ng DD/MM/YYYY.")
            return [SlotSet("prescription_date", None)]

        # Query MySQL: L·∫•y toa thu·ªëc c·ªßa maBN trong ng√†y ƒë√≥
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor(dictionary=True)
            query = """
            SELECT maTT, ngay_ke, noi_dung_toa
            FROM toa_thuoc
            WHERE maBN = %s AND DATE(ngay_ke) = %s
            ORDER BY ngay_ke
            """
            cursor.execute(query, (MA_BN_GLOBAL, parsed_date))
            prescriptions = cursor.fetchall()
            cursor.close()
            conn.close()
        except Error as e:
            dispatcher.utter_message(text=f"L·ªói k·∫øt n·ªëi DB: {e}")
            return [SlotSet("prescription_date", None)]

        if not prescriptions:
            dispatcher.utter_message(text=f"Kh√¥ng c√≥ toa thu·ªëc n√†o trong ng√†y {prescription_date}.")
            buttons = [{"title": "Quay l·∫°i menu", "payload": "/greet"}]
            dispatcher.utter_message(text="B·∫°n c√≥ mu·ªën tra c·ª©u ng√†y kh√°c kh√¥ng?", buttons=buttons)
            return [SlotSet("prescription_date", None)]

        # Hi·ªÉn th·ªã danh s√°ch toa thu·ªëc
        dispatcher.utter_message(text=f"Toa thu·ªëc ng√†y {prescription_date}:")
        for rx in prescriptions:
            rx_text = f"üìã Toa thu·ªëc ID {rx['maTT']} - Ng√†y k√™: {rx['ngay_ke']}\nN·ªôi dung: {rx['noi_dung_toa']}"
            dispatcher.utter_message(text=rx_text)

        buttons = [{"title": "Tra c·ª©u ng√†y kh√°c", "payload": "/search_prescription"}, {"title": "Quay l·∫°i menu", "payload": "/greet"}]
        dispatcher.utter_message(text="B·∫°n c√≥ mu·ªën tra c·ª©u th√™m kh√¥ng?", buttons=buttons)

        return [SlotSet("prescription_date", None)]

class ActionSubmitBooking(Action):
    def name(self) -> Text:
        return "action_submit_booking"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]) -> List[Dict]:
        doctor_name = tracker.get_slot("doctor_name")
        specialty = tracker.get_slot("specialty")
        date_str = tracker.get_slot("date")
        appointment_time = tracker.get_slot("appointment_time")
        decription = tracker.get_slot("decription")

        if not all([doctor_name, specialty, date_str, appointment_time, decription]):
            dispatcher.utter_message(text="Th√¥ng tin ch∆∞a ƒë·∫ßy ƒë·ªß. Vui l√≤ng ho√†n t·∫•t form.")
            return []

        try:
            parsed_date = datetime.strptime(date_str, '%d/%m/%Y').date()
        except ValueError:
            dispatcher.utter_message(text="Ng√†y kh√¥ng h·ª£p l·ªá.")
            return []

        # L·∫•y maBS t·ª´ tenBS
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor(dictionary=True)
            query = "SELECT maBS FROM bacsi WHERE tenBS = %s"
            cursor.execute(query, (doctor_name,))
            bs_result = cursor.fetchone()
            if not bs_result:
                dispatcher.utter_message(text="Kh√¥ng t√¨m th·∫•y b√°c sƒ©.")
                cursor.close()
                conn.close()
                return []
            maBS = bs_result['maBS']
            cursor.close()
            conn.close()
        except Error as e:
            dispatcher.utter_message(text=f"L·ªói DB: {e}")
            return []

        # T·∫°o maLH
        now = datetime.now()
        maLH = f"LH{now.strftime('%Y%m%d%H%M%S')}"

        # Insert v√†o DB
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            query = """
            INSERT INTO lichhen (maLH, maBN, maBS, ngaythangnam, khunggio, trangthai, mo_ta)
            VALUES (%s, %s, %s, %s, %s, %s, %s)
            """
            cursor.execute(query, (maLH, MA_BN_GLOBAL, maBS, parsed_date, appointment_time, 'ch·ªù', decription))
            conn.commit()
            cursor.close()
            conn.close()
            dispatcher.utter_message(text="ƒê·∫∑t l·ªãch th√†nh c√¥ng! C·∫£m ∆°n b·∫°n.")
        except Error as e:
            dispatcher.utter_message(text=f"L·ªói ƒë·∫∑t l·ªãch: {e}")
            return []

        # Reset slots
        events = [
            SlotSet("current_task", None),
            SlotSet("doctor_name", None),
            SlotSet("specialty", None),
            SlotSet("date", None),
            SlotSet("appointment_time", None),
            SlotSet("decription", None)
        ]
        return events

class ActionResetBooking(Action):
    def name(self) -> Text:
        return "action_reset_booking"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]) -> List[Dict]:
        dispatcher.utter_message(text="ƒê√£ h·ªßy y√™u c·∫ßu ƒë·∫∑t l·ªãch. B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu l·∫°i.")
        events = [
            SlotSet("current_task", None),
            SlotSet("doctor_name", None),
            SlotSet("specialty", None),
            SlotSet("date", None),
            SlotSet("appointment_time", None),
            SlotSet("decription", None)
        ]
        return events

class ActionResetCancel(Action):
    def name(self) -> Text:
        return "action_reset_cancel"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]) -> List[Dict]:
        dispatcher.utter_message(text="ƒê√£ h·ªßy h√†nh ƒë·ªông h·ªßy l·ªãch. L·ªãch h·∫πn v·∫´n gi·ªØ nguy√™n.")
        events = [
            SlotSet("selected_appointment_id", None),
            SlotSet("current_task", None),
            SlotSet("appointment_date", None)
        ]
        return events

class ActionSetCurrentTask(Action):
    def name(self) -> Text:
        return "action_set_current_task"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]) -> List[Dict]:
        intent = tracker.latest_message['intent'].get('name', '')
        if intent == 'request_doctor':
            return [SlotSet("current_task", "request_doctor")]
        elif intent == 'book_appointment':
            return [SlotSet("current_task", "book_appointment")]
        elif intent == 'cancel_appointment':
            return [SlotSet("current_task", "cancel_appointment")]
        return []