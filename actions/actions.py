from typing import Any, Text, Dict, List
from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher
from rasa_sdk.events import SlotSet, FollowupAction, ActiveLoop
from rasa_sdk.forms import FormValidationAction
import mysql.connector
from mysql.connector import Error
from datetime import datetime
import os
from dotenv import load_dotenv
import re  # Th√™m ƒë·ªÉ parse payload fallback
from rasa_sdk.types import DomainDict
from datetime import datetime, timedelta
import google.generativeai as genai


# Load file .env
load_dotenv()

genai.configure(api_key=os.getenv('GEMINI_API_KEY'))

# K·∫øt n·ªëi DB t·ª´ .env
DB_CONFIG = {
    'host': os.getenv('DB_HOST'),
    'user': os.getenv('DB_USER'),
    'password': os.getenv('DB_PASSWORD'),
    'database': os.getenv('DB_NAME')
}

if None in DB_CONFIG.values():
    raise ValueError("Thi·∫øu th√¥ng tin k·∫øt n·ªëi DB trong file .env.")

# Keywords ƒë·ªÉ detect wrong input (m·ªü r·ªông theo data)
WRONG_INPUT_KEYWORDS = {
    'date': ['ƒëau', 'b·ªánh', 'ti√™u ch·∫£y', 's·ªët', 'ho', 'm√¥ t·∫£', 'tri·ªáu ch·ª©ng'],
    'specialty': ['ƒëau', 'b·ªánh', 'ti√™u ch·∫£y', 'ng√†y', 'th·ªùi gian'],
    'doctor_name': ['ƒëau', 'b·ªánh', 'ng√†y', 'th·ªùi gian', 'n·ªôi khoa'],
    'appointment_time': ['ƒëau', 'b·ªánh', 'ng√†y', 'ƒëau b·ª•ng', 's√°ng'],
    'decription': ['ng√†y', 'th·ªùi gian', 'b√°c sƒ©', 'chuy√™n khoa']
}

# Global variable cho m√£ b·ªánh nh√¢n (c√≥ th·ªÉ set ƒë·ªông t·ª´ slot ho·∫∑c config sau)
MA_BN_GLOBAL = "BN0001"  # V√≠ d·ª•: "BN001", thay b·∫±ng gi√° tr·ªã th·ª±c t·∫ø ho·∫∑c t·ª´ tracker.get_slot("patient_id")

# === TH√äM M·ªöI ACTION ·ªû CU·ªêI FILE HO·∫∂C G·∫¶N C√ÅC ACTION TRA C·ª®U KH√ÅC ===

class ActionShowExaminingDoctorInForm(Action):
    """
    Action tra c·ª©u v√† hi·ªÉn th·ªã b√°c sƒ© ƒë√£ kh√°m g·∫ßn nh·∫•t cho b·ªánh nh√¢n.
    """
    def name(self) -> Text:
        return "action_show_examining_doctor_in_form"

    def run(self, dispatcher, tracker, domain):
        print(f"[DEBUG] Running ActionShowExaminingDoctorInForm cho b·ªánh nh√¢n: {MA_BN_GLOBAL}")
        
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor(dictionary=True)
            # Query ƒë·ªÉ l·∫•y b√°c sƒ© kh√°m g·∫ßn nh·∫•t d·ª±a tr√™n maBN
            query = """
            SELECT bs.tenBS, lk.ngaythangnamkham 
            FROM lankham lk
            JOIN bacsi bs ON lk.maBS = bs.maBS
            JOIN hosobenhnhan hs ON lk.maHS = hs.maHS
            WHERE hs.maBN = %s
            ORDER BY lk.ngaythangnamkham DESC
            LIMIT 1
            """
            cursor.execute(query, (MA_BN_GLOBAL,))
            result = cursor.fetchone()
            cursor.close()
            conn.close()
            
            if result:
                doctor_name = result['tenBS']
                last_visit_date = result['ngaythangnamkham'].strftime('%d/%m/%Y')
                
                message = f"""
                <div style="font-family: Arial, sans-serif; font-size: 15px; color: #333;
                            background: #e7f3ff; border-left: 4px solid #007bff; border-radius: 8px;
                            padding: 12px 14px; margin: 4px 0;">
                    <div style="font-weight: bold; color: #007bff; margin-bottom: 6px;">ü©∫ Th√¥ng tin b√°c sƒ© kh√°m g·∫ßn nh·∫•t:</div>
                    <div><strong>B√°c sƒ©:</strong> {doctor_name}</div>
                    <div><strong>Ng√†y kh√°m:</strong> {last_visit_date}</div>
                    <div style="margin-top: 6px; font-style: italic;">üëâ Vui l√≤ng ti·∫øp t·ª•c y√™u c·∫ßu c·ªßa b·∫°n...</div>
                </div>
                """
                dispatcher.utter_message(text=message, metadata={"html": True})
            else:
                dispatcher.utter_message(
                    text="Kh√¥ng t√¨m th·∫•y l·ªãch s·ª≠ kh√°m b·ªánh n√†o cho b·∫°n trong h·ªá th·ªëng."
                )
                
        except Error as e:
            print(f"[ERROR] DB Error in ActionShowExaminingDoctorInForm: {e}")
            dispatcher.utter_message(text=f"L·ªói khi tra c·ª©u c∆° s·ªü d·ªØ li·ªáu: {e}")
        
        # Action n√†y ch·ªâ hi·ªÉn th·ªã th√¥ng tin, kh√¥ng set slot
        # Form s·∫Ω t·ª± ƒë·ªông h·ªèi l·∫°i slot ƒëang y√™u c·∫ßu
        return []

# Thay th·∫ø ph·∫ßn ValidateCancelAppointmentForm v√† c√°c action li√™n quan
class ActionHandleOutOfScope(Action):
    """
    Action x·ª≠ l√Ω c√°c intent kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ (out-of-scope).
    C√≥ th·ªÉ ƒë∆∞·ª£c trigger trong b·∫•t k·ª≥ context n√†o, k·ªÉ c·∫£ khi ƒëang trong form.
    
    QUAN TR·ªåNG: Trong form, sau khi x·ª≠ l√Ω s·∫Ω QUAY L·∫†I FORM b·∫±ng FollowupAction
    """
    def name(self) -> Text:
        return "action_handle_out_of_scope"

    def run(
        self, 
        dispatcher: CollectingDispatcher, 
        tracker: Tracker, 
        domain: Dict[Text, Any]
    ) -> List[Dict]:
        
        # Ki·ªÉm tra xem c√≥ ƒëang trong form kh√¥ng
        active_loop = tracker.active_loop.get('name') if tracker.active_loop else None
        current_task = tracker.get_slot("current_task")
        
        # Th√¥ng b√°o ph√π h·ª£p v·ªõi context
        if active_loop:
            # ƒêang trong form
            message = (
                "Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y l√∫c n√†y. "
                "T√¥i ƒëang gi√∫p b·∫°n ho√†n t·∫•t y√™u c·∫ßu hi·ªán t·∫°i. "
                "B·∫°n c√≥ th·ªÉ h·ªèi l·∫°i sau khi ho√†n t·∫•t, ho·∫∑c n√≥i 'h·ªßy' ƒë·ªÉ d·ª´ng l·∫°i."
            )
            dispatcher.utter_message(text=message)
            
            # ‚Üê QUAN TR·ªåNG: Quay l·∫°i form b·∫±ng FollowupAction
            return [FollowupAction(active_loop)]
        
        else:
            # Kh√¥ng trong form - utter response chi ti·∫øt h∆°n
            dispatcher.utter_message(response="utter_out_of_scope")
            
            # Reset current_task n·∫øu c√≥
            if current_task:
                return [SlotSet("current_task", None)]
            
            return []


class ActionDefaultFallback(Action):
    """
    Action x·ª≠ l√Ω khi NLU kh√¥ng th·ªÉ ph√¢n lo·∫°i intent (fallback).
    Kh√°c v·ªõi out_of_scope: ƒë√¢y l√† khi bot "kh√¥ng hi·ªÉu", 
    c√≤n out_of_scope l√† khi bot hi·ªÉu nh∆∞ng kh√¥ng h·ªó tr·ª£.
    
    QUAN TR·ªåNG: Trong form, action n√†y s·∫Ω:
    1. Th√¥ng b√°o kh√¥ng hi·ªÉu
    2. H·ªèi l·∫°i requested_slot hi·ªán t·∫°i
    3. QUAY L·∫†I FORM b·∫±ng FollowupAction
    """
    def name(self) -> Text:
        return "action_default_fallback"

    def run(
        self, 
        dispatcher: CollectingDispatcher, 
        tracker: Tracker, 
        domain: Dict[Text, Any]
    ) -> List[Dict]:
        
        active_loop = tracker.active_loop.get('name') if tracker.active_loop else None
        requested_slot = tracker.get_slot('requested_slot')
        
        if active_loop:
            # TRONG FORM - x·ª≠ l√Ω fallback v√† ti·∫øp t·ª•c form
            
            # 1. Th√¥ng b√°o kh√¥ng hi·ªÉu
            dispatcher.utter_message(
                text="Xin l·ªói, t√¥i kh√¥ng hi·ªÉu r√µ c√¢u tr·∫£ l·ªùi c·ªßa b·∫°n. ü§î"
            )
            
            # 2. H·ªèi l·∫°i slot hi·ªán t·∫°i v·ªõi g·ª£i √Ω c·ª• th·ªÉ
            if requested_slot:
                if requested_slot == "specialty":
                    dispatcher.utter_message(
                        text="Vui l√≤ng cho bi·∫øt b·∫°n mu·ªën kh√°m chuy√™n khoa n√†o? "
                             "V√≠ d·ª•: n·ªôi khoa, ngo·∫°i khoa, nhi khoa, th·∫ßn kinh, ph·ª• s·∫£n, rƒÉng h√†m m·∫∑t."
                    )
                elif requested_slot == "doctor_name":
                    dispatcher.utter_message(
                        text="Vui l√≤ng nh·∫≠p t√™n b√°c sƒ© b·∫°n mu·ªën kh√°m. "
                             "V√≠ d·ª•: b√°c sƒ© Nguy·ªÖn VƒÉn A, ho·∫∑c ch·ªâ c·∫ßn nh·∫≠p 'Nguy·ªÖn VƒÉn A'."
                    )
                elif requested_slot == "date":
                    dispatcher.utter_message(
                        text="Vui l√≤ng nh·∫≠p ng√†y h·∫πn theo ƒë·ªãnh d·∫°ng DD/MM/YYYY. "
                             "V√≠ d·ª•: 25/10/2025"
                    )
                elif requested_slot == "appointment_time":
                    dispatcher.utter_message(
                        text="Vui l√≤ng nh·∫≠p gi·ªù h·∫πn theo ƒë·ªãnh d·∫°ng HH:MM (t·ª´ 8:00 ƒë·∫øn 17:00). "
                             "V√≠ d·ª•: 14:30"
                    )
                elif requested_slot == "decription":
                    dispatcher.utter_message(
                        text="Vui l√≤ng m√¥ t·∫£ chi ti·∫øt t√¨nh tr·∫°ng s·ª©c kh·ªèe c·ªßa b·∫°n. "
                             "V√≠ d·ª•: 'Con t√¥i b·ªã s·ªët 3 ng√†y, ho nhi·ªÅu v√†o ban ƒë√™m'."
                    )
                elif requested_slot == "appointment_date":
                    dispatcher.utter_message(
                        text="Vui l√≤ng nh·∫≠p ng√†y b·∫°n mu·ªën h·ªßy l·ªãch theo ƒë·ªãnh d·∫°ng DD/MM/YYYY. "
                             "V√≠ d·ª•: 25/10/2025"
                    )
                elif requested_slot == "selected_appointment_id":
                    dispatcher.utter_message(
                        text="Vui l√≤ng ch·ªçn m·ªôt l·ªãch h·∫πn t·ª´ danh s√°ch b·∫±ng c√°ch click v√†o n√∫t 'Ch·ªçn l·ªãch n√†y'."
                    )
                elif requested_slot == "symptoms":
                    dispatcher.utter_message(
                        text="Vui l√≤ng m√¥ t·∫£ c√°c tri·ªáu ch·ª©ng b·∫°n ƒëang g·∫∑p ph·∫£i. "
                             "V√≠ d·ª•: ƒëau ƒë·∫ßu, s·ªët, ho, kh√≥ th·ªü."
                    )
                else:
                    # Generic fallback cho c√°c slot kh√°c
                    dispatcher.utter_message(
                        text=f"Vui l√≤ng cung c·∫•p th√¥ng tin cho: {requested_slot}"
                    )
            else:
                # Kh√¥ng c√≥ requested_slot (tr∆∞·ªùng h·ª£p hi·∫øm)
                dispatcher.utter_message(
                    text="Vui l√≤ng tr·∫£ l·ªùi c√¢u h·ªèi ph√≠a tr√™n ho·∫∑c n√≥i 'h·ªßy' ƒë·ªÉ d·ª´ng l·∫°i."
                )
            
            # 3. ‚Üê QUAN TR·ªåNG: QUAY L·∫†I FORM b·∫±ng FollowupAction
            return [FollowupAction(active_loop)]
        
        else:
            # NGO√ÄI FORM - g·ª£i √Ω ch·ª©c nƒÉng
            message = (
                "Xin l·ªói, t√¥i kh√¥ng hi·ªÉu y√™u c·∫ßu c·ªßa b·∫°n. üòï\n\n"
                "T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n"
                "ü©∫ ƒê·ªÅ xu·∫•t b√°c sƒ© d·ª±a tr√™n tri·ªáu ch·ª©ng\n"
                "üìÖ ƒê·∫∑t l·ªãch h·∫πn kh√°m b·ªánh\n"
                "‚ùå H·ªßy l·ªãch h·∫πn\n"
                "üìã Tra c·ª©u th√¥ng tin b√°c sƒ© v√† chuy√™n khoa\n\n"
                "B·∫°n mu·ªën l√†m g√¨?"
            )
            dispatcher.utter_message(
                text=message,
                buttons=[
                    {"title": "ƒê·ªÅ xu·∫•t b√°c sƒ©", "payload": "/request_doctor"},
                    {"title": "ƒê·∫∑t l·ªãch h·∫πn", "payload": "/book_appointment"},
                    {"title": "H·ªßy l·ªãch h·∫πn", "payload": "/cancel_appointment"}
                ]
            )
            return [SlotSet("current_task", None)]


class ValidateCancelAppointmentForm(FormValidationAction):
    """Validation cho cancel_appointment_form v·ªõi h·ªó tr·ª£ interruption"""
    
    def name(self) -> Text:
        return "validate_cancel_appointment_form"

    def _handle_form_interruption(self, dispatcher, tracker):
        """X·ª≠ l√Ω interruption trong cancel form"""
        latest_message = tracker.latest_message
        
        if hasattr(latest_message, 'intent'):
            latest_intent = latest_message.intent.get('name')
        else:
            latest_intent = latest_message.get('intent', {}).get('name')

        # === X·ª≠ l√Ω explain_specialty ===
        if latest_intent == "explain_specialty":
            explain_action = ActionExplainSpecialtyInForm()
            explain_action.run(dispatcher, tracker, {})
            return {
                "specialty": tracker.get_slot("specialty"),
                "just_explained": False,
            }
        
        # === X·ª≠ l√Ω ask_doctor_info ===
        if latest_intent == "ask_doctor_info":
            info_action = ActionShowDoctorInfoInForm()
            info_action.run(dispatcher, tracker, {})
            return {
                "doctor_name": tracker.get_slot("doctor_name"),
                "just_asked_doctor_info": False,
            }
        
        # === X·ª≠ l√Ω list_doctors_by_specialty ===
        if latest_intent == "list_doctors_by_specialty":
            list_action = ActionListDoctorsInForm()
            list_action.run(dispatcher, tracker, {})
            return {
                "specialty": tracker.get_slot("specialty"),
                "just_listed_doctors": False,
            }

        # === TH√äM M·ªöI: X·ª≠ l√Ω ask_who_examined_me ===
        if latest_intent == "ask_who_examined_me":
            info_action = ActionShowExaminingDoctorInForm()
            info_action.run(dispatcher, tracker, {})
            # Tr·∫£ v·ªÅ slot dummy ƒë·ªÉ form ti·∫øp t·ª•c
            return {"just_asked_examining_doctor": False}
        
        return {}

    def validate_appointment_date(
        self, 
        slot_value: Any, 
        dispatcher: CollectingDispatcher, 
        tracker: Tracker, 
        domain: Dict[Text, Any]
    ) -> Dict[Text, Any]:
        """Validate ng√†y h·ªßy l·ªãch"""
        
        # === CHECK INTERRUPTION TR∆Ø·ªöC ===
        interruption_result = self._handle_form_interruption(dispatcher, tracker)
        if interruption_result:
            return interruption_result
        
        # === VALIDATION B√åNH TH∆Ø·ªúNG ===
        if not slot_value:
            dispatcher.utter_message(text="Vui l√≤ng cung c·∫•p ng√†y b·∫°n mu·ªën h·ªßy l·ªãch h·∫πn (DD/MM/YYYY).")
            return {"appointment_date": None}

        date_input = str(slot_value).strip()
        
        # Validate format
        try:
            parsed_date = datetime.strptime(date_input, '%d/%m/%Y').date()
        except ValueError:
            dispatcher.utter_message(text="Ng√†y kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p theo ƒë·ªãnh d·∫°ng DD/MM/YYYY.")
            return {"appointment_date": None}

        # Query DB ƒë·ªÉ l·∫•y danh s√°ch l·ªãch h·∫πn trong ng√†y
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor(dictionary=True)
            query = """
            SELECT lh.mahen, lh.ngaythangnam, lh.khunggio, bs.tenBS, ck.tenCK
            FROM lichhen lh
            JOIN bacsi bs ON lh.maBS = bs.maBS
            JOIN chuyenkhoa ck ON lh.maCK = ck.maCK
            WHERE lh.maBN = %s AND DATE(lh.ngaythangnam) = %s AND lh.trangthai != 'h·ªßy'
            ORDER BY lh.khunggio
            """
            cursor.execute(query, (MA_BN_GLOBAL, parsed_date))
            appointments = cursor.fetchall()
            cursor.close()
            conn.close()
        except Error as e:
            dispatcher.utter_message(text=f"L·ªói k·∫øt n·ªëi DB: {e}")
            return {"appointment_date": None}

        if not appointments:
            dispatcher.utter_message(text=f"Kh√¥ng c√≥ l·ªãch h·∫πn n√†o trong ng√†y {date_input}. Vui l√≤ng ch·ªçn ng√†y kh√°c.")
            buttons = [
                {"title": "Ch·ªçn ng√†y kh√°c", "payload": "/cancel_appointment"},
                {"title": "Quay l·∫°i menu", "payload": "/greet"}
            ]
            dispatcher.utter_message(text="B·∫°n c√≥ mu·ªën th·ª≠ ng√†y kh√°c kh√¥ng?", buttons=buttons)
            return {"appointment_date": None}

        # Hi·ªÉn th·ªã danh s√°ch l·ªãch h·∫πn
        dispatcher.utter_message(text=f"üìã **Danh s√°ch l·ªãch h·∫πn ng√†y {date_input}:**")
        
        for idx, appt in enumerate(appointments, 1):
            appt_text = f"{idx}. ü©∫ **B√°c sƒ© {appt['tenBS']}** ({appt['tenCK']})\n   - Gi·ªù: {appt['khunggio']}\n   - M√£ l·ªãch: {appt['mahen']}"
            dispatcher.utter_message(
                text=appt_text,
                buttons=[
                    {
                        "title": f"Ch·ªçn l·ªãch n√†y",
                        "payload": f"/select_appointment{{\"appointment_id\":\"{appt['mahen']}\"}}"
                    }
                ]
            )
        
        dispatcher.utter_message(text=f"\nT·ªïng c·ªông: {len(appointments)} l·ªãch h·∫πn. Vui l√≤ng ch·ªçn l·ªãch c·∫ßn h·ªßy.")
        
        # Tr·∫£ v·ªÅ v·ªõi appointment_date ƒë√£ validate
        return {"appointment_date": date_input}

    def validate_selected_appointment_id(
        self,
        slot_value: Any,
        dispatcher: CollectingDispatcher,
        tracker: Tracker,
        domain: Dict[Text, Any]
    ) -> Dict[Text, Any]:
        """Validate m√£ l·ªãch h·∫πn ƒë∆∞·ª£c ch·ªçn"""
        
        # === CHECK INTERRUPTION TR∆Ø·ªöC ===
        interruption_result = self._handle_form_interruption(dispatcher, tracker)
        if interruption_result:
            return interruption_result
        
        if not slot_value:
            dispatcher.utter_message(text="Vui l√≤ng ch·ªçn m·ªôt l·ªãch h·∫πn ƒë·ªÉ h·ªßy.")
            return {"selected_appointment_id": None}
        
        # Validate appointment_id t·ªìn t·∫°i trong DB
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor(dictionary=True)
            query = """
            SELECT lh.mahen, lh.ngaythangnam, lh.khunggio, bs.tenBS, ck.tenCK
            FROM lichhen lh
            JOIN bacsi bs ON lh.maBS = bs.maBS
            JOIN chuyenkhoa ck ON lh.maCK = ck.maCK
            WHERE lh.mahen = %s AND lh.maBN = %s AND lh.trangthai != 'h·ªßy'
            """
            cursor.execute(query, (slot_value, MA_BN_GLOBAL))
            appointment = cursor.fetchone()
            cursor.close()
            conn.close()
        except Error as e:
            dispatcher.utter_message(text=f"L·ªói k·∫øt n·ªëi DB: {e}")
            return {"selected_appointment_id": None}

        if not appointment:
            dispatcher.utter_message(text="Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn n√†y ho·∫∑c l·ªãch ƒë√£ b·ªã h·ªßy. Vui l√≤ng ch·ªçn l·∫°i.")
            return {"selected_appointment_id": None}

        # Hi·ªÉn th·ªã th√¥ng tin l·ªãch h·∫πn ƒë√£ ch·ªçn
        confirm_text = f"""
        ‚úÖ **ƒê√£ ch·ªçn l·ªãch h·∫πn:**

        - M√£ l·ªãch: {appointment['mahen']}
        - B√°c sƒ©: {appointment['tenBS']}
        - Chuy√™n khoa: {appointment['tenCK']}
        - Ng√†y: {appointment['ngaythangnam']}
        - Gi·ªù: {appointment['khunggio']}
        """
        dispatcher.utter_message(text=confirm_text)

        return {"selected_appointment_id": slot_value}
    

class ActionCancelAppointmentUpdated(Action):
    """Action kh·ªüi t·∫°o cancel form - CH·ªà set context, KH√îNG hi·ªÉn th·ªã g√¨"""
    
    def name(self) -> Text:
        return "action_cancel_appointment"

    def run(
        self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]
    ) -> List[Dict]:
        # CH·ªà set context, KH√îNG utter message
        return [
            SlotSet("current_task", "cancel_appointment"),
            SlotSet("appointment_date", None),
            SlotSet("selected_appointment_id", None)
        ]


class ActionConfirmCancelUpdated(Action):
    """Action hi·ªÉn th·ªã x√°c nh·∫≠n h·ªßy l·ªãch (sau khi form ho√†n t·∫•t)"""
    
    def name(self) -> Text:
        return "action_confirm_cancel"

    def run(
        self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]
    ) -> List[Dict]:
        selected_id = tracker.get_slot("selected_appointment_id")
        
        if not selected_id:
            dispatcher.utter_message(text="Kh√¥ng c√≥ l·ªãch h·∫πn ƒë∆∞·ª£c ch·ªçn.")
            return []

        # Query th√¥ng tin l·ªãch h·∫πn ƒë·ªÉ hi·ªÉn th·ªã confirm
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor(dictionary=True)
            query = """
            SELECT lh.mahen, lh.ngaythangnam, lh.khunggio, bs.tenBS, ck.tenCK
            FROM lichhen lh
            JOIN bacsi bs ON lh.maBS = bs.maBS
            JOIN chuyenkhoa ck ON lh.maCK = ck.maCK
            WHERE lh.mahen = %s AND lh.maBN = %s AND lh.trangthai != 'h·ªßy'
            """
            cursor.execute(query, (selected_id, MA_BN_GLOBAL))
            appointment = cursor.fetchone()
            cursor.close()
            conn.close()
        except Error as e:
            dispatcher.utter_message(text=f"L·ªói k·∫øt n·ªëi DB: {e}")
            return []

        if not appointment:
            dispatcher.utter_message(text="Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn n√†y ho·∫∑c l·ªãch ƒë√£ b·ªã h·ªßy.")
            return []

        # Hi·ªÉn th·ªã confirm message
        confirm_text = f"""
            üìã **X√°c nh·∫≠n h·ªßy l·ªãch h·∫πn**

            - M√£ l·ªãch: {appointment['mahen']}
            - B√°c sƒ©: {appointment['tenBS']}
            - Chuy√™n khoa: {appointment['tenCK']}
            - Ng√†y: {appointment['ngaythangnam']}
            - Gi·ªù: {appointment['khunggio']}

            B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën h·ªßy l·ªãch h·∫πn n√†y kh√¥ng?
        """
        
        dispatcher.utter_message(
            text=confirm_text,
            buttons=[
                {"title": "X√°c nh·∫≠n h·ªßy", "payload": "/affirm"},
                {"title": "Kh√¥ng h·ªßy", "payload": "/deny"}
            ]
        )
        
        return []


class ActionPerformCancelUpdated(Action):
    """Action th·ª±c hi·ªán h·ªßy l·ªãch sau khi affirm"""
    
    def name(self) -> Text:
        return "action_perform_cancel"

    def run(
        self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]
    ) -> List[Dict]:
        selected_id = tracker.get_slot("selected_appointment_id")
        
        if not selected_id:
            dispatcher.utter_message(text="Kh√¥ng c√≥ l·ªãch h·∫πn ƒë∆∞·ª£c ch·ªçn.")
            return []

        # Update DB: Set trangthai = 'h·ªßy'
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            query = "UPDATE lichhen SET trangthai = 'h·ªßy' WHERE mahen = %s AND maBN = %s"
            cursor.execute(query, (selected_id, MA_BN_GLOBAL))
            conn.commit()
            rows_affected = cursor.rowcount
            cursor.close()
            conn.close()
            
            if rows_affected > 0:
                dispatcher.utter_message(text=f"‚úÖ ƒê√£ h·ªßy th√†nh c√¥ng l·ªãch h·∫πn **{selected_id}**.")
            else:
                dispatcher.utter_message(text="Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn ƒë·ªÉ h·ªßy ho·∫∑c l·ªãch ƒë√£ b·ªã h·ªßy tr∆∞·ªõc ƒë√≥.")
        except Error as e:
            dispatcher.utter_message(text=f"‚ùå L·ªói c·∫≠p nh·∫≠t DB: {e}")

        # Offer next action
        buttons = [
            {"title": "H·ªßy l·ªãch kh√°c", "payload": "/cancel_appointment"},
            {"title": "Quay l·∫°i menu", "payload": "/greet"}
        ]
        dispatcher.utter_message(text="B·∫°n c√≥ mu·ªën l√†m g√¨ ti·∫øp theo?", buttons=buttons)
        
        # Reset slots
        return [
            SlotSet("selected_appointment_id", None),
            SlotSet("appointment_date", None),
            SlotSet("current_task", None)
        ]


class ActionListDoctorsInForm(Action):
    def name(self) -> Text:
        return "action_list_doctors_in_form"

    def run(self, dispatcher, tracker, domain):
        # L·∫•y chuy√™n khoa t·ª´ entities ho·∫∑c slot
        entities = tracker.latest_message.get('entities', [])
        specialty_entity = next((e['value'] for e in entities if e['entity'] == 'specialty'), None)
        
        # ∆Øu ti√™n entity, sau ƒë√≥ slot
        specialty = specialty_entity or tracker.get_slot("specialty")
        
        if not specialty:
            dispatcher.utter_message(text="Vui l√≤ng cung c·∫•p t√™n chuy√™n khoa b·∫°n mu·ªën xem danh s√°ch b√°c sƒ©.")
            return []
        
        print(f"[DEBUG] Listing doctors for specialty: {specialty}")
        
        # Query DB ƒë·ªÉ l·∫•y danh s√°ch b√°c sƒ© theo chuy√™n khoa
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor(dictionary=True)
            query = """
            SELECT bs.maBS, bs.tenBS, ck.tenCK, bs.sdtBS, bs.emailBS, bs.gioithieu
            FROM bacsi bs
            JOIN chuyenmon cm ON bs.maBS = cm.maBS
            JOIN chuyenkhoa ck ON cm.maCK = ck.maCK
            WHERE ck.tenCK LIKE %s
            ORDER BY bs.tenBS
            """
            cursor.execute(query, (f"%{specialty}%",))
            doctors = cursor.fetchall()
            cursor.close()
            conn.close()
            
            if not doctors:
                dispatcher.utter_message(text=f"Kh√¥ng t√¨m th·∫•y b√°c sƒ© n√†o trong chuy√™n khoa '{specialty}'. Vui l√≤ng ki·ªÉm tra l·∫°i t√™n chuy√™n khoa.")
                return [SlotSet("specialty", None)]
            
            # Hi·ªÉn th·ªã danh s√°ch b√°c sƒ© b·∫±ng HTML
            html_list = f"""
            <div style="font-family: Arial, sans-serif; font-size: 15px; color: #333; background: #f8faff; border-radius: 10px; padding: 10px; border: 1px solid #cce0ff;">
                <div style="color: #007bff; font-weight: bold; margin-bottom: 8px;">
                    üìã Danh s√°ch b√°c sƒ© chuy√™n khoa {doctors[0]['tenCK']}:
                </div>
            """

            for idx, doc in enumerate(doctors, 1):
                html_list += f"""
                <div style="background: #ffffff; border-left: 3px solid #007bff; border-radius: 6px; padding: 6px 10px; margin-bottom: 6px;">
                    <div style="font-weight: bold; color: #007bff;">ü©∫ B√°c sƒ© {doc['tenBS']}</div>
                    <div>üìû <strong>SƒêT:</strong> {doc['sdtBS']}</div>
                    <div>‚úâÔ∏è <strong>Email:</strong> {doc.get('emailBS', 'Ch∆∞a c√≥')}</div>
                    <div>‚úâÔ∏è <strong>Gi·ªõi thi·ªáu:</strong> {doc.get('gioithieu', 'Ch∆∞a c√≥ ph·∫ßn gi·ªõi thi·ªáu')}</div>
                </div>
                """

            html_list += f"""
                <div style="margin-top: 8px; font-size: 15px; color: #555;">
                    T·ªïng c·ªông: <strong>{len(doctors)}</strong> b√°c sƒ©<br>
                    üëâ Ti·∫øp t·ª•c ƒë·∫∑t l·ªãch...
                </div>
            </div>
            """

            dispatcher.utter_message(text=html_list, html=True)

            
            # Set l·∫°i specialty n·∫øu kh√°c v·ªõi specialty hi·ªán t·∫°i
            current_specialty = tracker.get_slot("specialty")
            if not current_specialty or current_specialty.lower() != doctors[0]['tenCK'].lower():
                return [SlotSet("specialty", doctors[0]['tenCK'])]
            
            return []
            
        except Exception as e:
            print(f"[ERROR] {e}")
            dispatcher.utter_message(text="C√≥ l·ªói khi tra c·ª©u danh s√°ch b√°c sƒ©. Vui l√≤ng th·ª≠ l·∫°i.")
            return []


class ActionShowDoctorInfoInForm(Action):
    def name(self) -> Text:
        return "action_show_doctor_info_in_form"

    def run(self, dispatcher, tracker, domain):
        # L·∫•y t√™n b√°c sƒ© t·ª´ entities ho·∫∑c slot
        entities = tracker.latest_message.get('entities', [])
        doctor_name = next((e['value'] for e in entities if e['entity'] == 'doctor_name'), None)
        
        if not doctor_name:
            doctor_name = tracker.get_slot("doctor_name")
        
        if not doctor_name:
            dispatcher.utter_message(text="Vui l√≤ng cung c·∫•p t√™n b√°c sƒ© b·∫°n mu·ªën tra c·ª©u.")
            return []
        
        print(f"[DEBUG] Showing doctor info: {doctor_name}")
        
        # Query DB ƒë·ªÉ l·∫•y th√¥ng tin b√°c sƒ©
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor(dictionary=True)
            query = """
            SELECT bs.maBS, bs.tenBS, ck.tenCK, bs.sdtBS, bs.emailBS, bs.gioithieu
            FROM bacsi bs
            JOIN chuyenmon cm ON bs.maBS = cm.maBS
            JOIN chuyenkhoa ck ON cm.maCK = ck.maCK
            WHERE bs.tenBS LIKE %s
            """
            cursor.execute(query, (f"%{doctor_name}%",))
            doctor = cursor.fetchone()
            cursor.close()
            conn.close()
            
            if doctor:
                # Tr√¨nh b√†y th√¥ng tin theo ki·ªÉu danh thi·∫øp s·ª≠ d·ª•ng HTML
                info_html = f"""
                <div style="border-left: 4px solid #007bff; background: #eef6ff; border-radius: 8px; padding: 10px 14px; font-family: Arial, sans-serif; font-size: 15px; line-height: 1.4; color: #333;">
                    <div style="font-weight: bold; color: #007bff; margin-bottom: 6px;">üë®‚Äç‚öïÔ∏è B√°c sƒ© {doctor['tenBS']}</div>
                    <div><strong>M√£ BS:</strong> {doctor['maBS']}</div>
                    <div><strong>Chuy√™n khoa:</strong> {doctor['tenCK']}</div>
                    <div><strong>SƒêT:</strong> {doctor['sdtBS']}</div>
                    <div><strong>Email:</strong> {doctor.get('emailBS', 'Ch∆∞a c√≥')}</div>
                    <div><strong>Gi·ªõi thi·ªáu:</strong> {doctor.get('gioithieu', 'Ch∆∞a c√≥ ph·∫ßn gi·ªõi thi·ªáu')}</div>
                </div>
                <div style="margin-top: 6px; font-size: 15px;">Ti·∫øp t·ª•c ƒë·∫∑t l·ªãch...</div>
                """
                dispatcher.utter_message(text=info_html)
                
                # N·∫øu user ch∆∞a ch·ªçn b√°c sƒ© n√†y, set v√†o slot
                current_doctor = tracker.get_slot("doctor_name")
                if not current_doctor or current_doctor.lower() != doctor['tenBS'].lower():
                    return [SlotSet("doctor_name", doctor['tenBS'])]
                
                return []
            else:
                dispatcher.utter_message(text=f"Kh√¥ng t√¨m th·∫•y b√°c sƒ© '{doctor_name}'. Vui l√≤ng ki·ªÉm tra l·∫°i t√™n.")
                return []
                
        except Exception as e:
            print(f"[ERROR] {e}")
            dispatcher.utter_message(text="C√≥ l·ªói khi tra c·ª©u th√¥ng tin b√°c sƒ©. Vui l√≤ng th·ª≠ l·∫°i.")
            return []


class ActionExplainSpecialtyInForm(Action):
    def name(self) -> Text:
        return "action_explain_specialty_in_form"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        specialty = tracker.get_slot("specialty")
        
        if not specialty:
            return []
        
        print(f"[DEBUG] Explaining specialty: {specialty}")
        
        # Query DB
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor(dictionary=True)
            query = "SELECT tenCK, maCK, mota FROM chuyenkhoa WHERE tenCK LIKE %s"
            cursor.execute(query, (f"%{specialty}%",))
            result = cursor.fetchone()
            cursor.close()
            conn.close()
            
            if result:
                ten_ck = result['tenCK']
                explanation = result.get('mota')
                
                if not explanation:  # If mota is None or empty
                    # Use Gemini API to generate explanation
                    model = genai.GenerativeModel('gemini-1.5-flash')  # Or your preferred model
                    prompt = f"Gi·∫£i th√≠ch ng·∫Øn g·ªçn v·ªÅ chuy√™n khoa y t·∫ø '{specialty}' b·∫±ng ti·∫øng Vi·ªát."
                    response = model.generate_content(prompt)
                    explanation = response.text.strip() if response else f"Chuy√™n khoa {specialty}..."
                
                dispatcher.utter_message(
                    text=f"""
                    <div style="background-color: #f0f0f0; padding: 15px; border-radius: 10px; border: 1px solid #ddd; max-width: 400px; margin: 10px auto; font-family: Arial, sans-serif;">
                        <p style="font-size: 16px; margin: 0;">üìã <strong>{ten_ck}</strong>: {explanation}</p>
                        <br>
                        <p style="font-size: 14px; color: #666; margin: 0;">Ti·∫øp t·ª•c ƒë·∫∑t l·ªãch...</p>
                    </div>
                    """
                )
                return [SlotSet("specialty", ten_ck)]
            else:
                dispatcher.utter_message(text=f"Kh√¥ng t√¨m th·∫•y '{specialty}'.")
                return [SlotSet("specialty", None)]
        except Exception as e:
            print(f"[ERROR] {e}")
            dispatcher.utter_message(text="ƒê√£ x·∫£y ra l·ªói khi truy v·∫•n c∆° s·ªü d·ªØ li·ªáu.")
            return []


class ValidateMyForm(FormValidationAction):
    def name(self) -> Text:
        return "validate_my_form"

    async def extract_my_slot(
        self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: DomainDict
    ) -> Dict[Text, Any]:
        # Logic ƒë·ªÉ tr√≠ch xu·∫•t slot 'my_slot'
        # ...
        return []

    async def validate_my_slot(
        self,
        value: Text,
        dispatcher: CollectingDispatcher,
        tracker: Tracker,
        domain: DomainDict,
    ) -> Dict[Text, Any]:
        # L·∫•y intent c·ªßa tin nh·∫Øn g·∫ßn nh·∫•t t·ª´ ng∆∞·ªùi d√πng
        latest_intent = tracker.latest_message['intent'].get('name')

        # Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng mu·ªën d·ª´ng form b·∫±ng c√°ch n√≥i "t·∫°m d·ª´ng"
        if value and value == "t·∫°m d·ª´ng":
            dispatcher.utter_message(text="OK, t√¥i s·∫Ω t·∫°m d·ª´ng form n√†y. B·∫°n mu·ªën l√†m g√¨ ti·∫øp theo?")
            return {"requested_slot": None} # ƒê·∫∑t requested_slot v·ªÅ None ƒë·ªÉ d·ª´ng form

        # Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng k√≠ch ho·∫°t c√°c intent ƒë·∫∑c bi·ªát ƒë·ªÉ d·ª´ng form
        if latest_intent in ["explain_specialty", "ask_info_doctor"]:
            dispatcher.utter_message(text="ƒê√£ d·ª´ng form hi·ªán t·∫°i ƒë·ªÉ tr·∫£ l·ªùi y√™u c·∫ßu c·ªßa b·∫°n.")
            # ƒê·∫∑t t·∫•t c·∫£ c√°c slot c·ªßa form v·ªÅ None n·∫øu c·∫ßn
            # V√≠ d·ª•: form_slots_to_clear = ["slot_1", "slot_2"]
            # events = {slot: None for slot in form_slots_to_clear}
            # events["requested_slot"] = None
            # return events
            return {"requested_slot": None} # D·ª´ng form

        if value:
            # Logic validation th√¥ng th∆∞·ªùng cho my_slot n·∫øu kh√¥ng c√≥ y√™u c·∫ßu d·ª´ng form
            return {"my_slot": value}
        else:
            dispatcher.utter_message(text="T√¥i kh√¥ng hi·ªÉu. B·∫°n c√≥ th·ªÉ n√≥i r√µ h∆°n kh√¥ng?")
            return {"my_slot": None} # Y√™u c·∫ßu ng∆∞·ªùi d√πng nh·∫≠p l·∫°i

    async def run(
        self,
        dispatcher: CollectingDispatcher,
        tracker: Tracker,
        domain: Dict[Text, Any],
    ) -> List[Dict[Text, Any]]:
        # Logic c·ªßa form validation action
        return await super().run(dispatcher, tracker, domain)


class ValidateRecommendDoctorForm(FormValidationAction):
    def name(self) -> Text:
        return "validate_recommend_doctor_form"

    def validate_symptoms(
        self,
        slot_value: Any,
        dispatcher: CollectingDispatcher,
        tracker: Tracker,
        domain: Dict[Text, Any],
    ) -> Dict[Text, Any]:
        symptoms = tracker.latest_message.get('entities', [])
        symptom_list = [e['value'] for e in symptoms if e['entity'] == 'symptom']
        return {"symptoms": symptom_list}


class ActionRecommendDoctor(Action):
    def name(self) -> Text:
        return "action_recommend_doctor"

    def run(
        self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]
    ) -> List[Dict]:
        symptoms = tracker.get_slot("symptoms") or []
        if not symptoms:
            dispatcher.utter_message(text="Kh√¥ng nh·∫≠n ƒë∆∞·ª£c tri·ªáu ch·ª©ng. H√£y th·ª≠ l·∫°i.")
            return []

        symptom_to_specialty = {
            "ƒëau ƒë·∫ßu": "Th·∫ßn kinh", "ch√≥ng m·∫∑t": "Th·∫ßn kinh", "m·∫•t ng·ªß": "Th·∫ßn kinh", "co gi·∫≠t": "Th·∫ßn kinh",
            "t√™ b√¨ tay ch√¢n": "Th·∫ßn kinh", "r·ªëi lo·∫°n tr√≠ nh·ªõ": "Th·∫ßn kinh", "ƒëau n·ª≠a ƒë·∫ßu": "Th·∫ßn kinh",
            "run tay": "Th·∫ßn kinh", "m·∫•t thƒÉng b·∫±ng": "Th·∫ßn kinh",
            "s·ªët": "N·ªôi khoa", "m·ªát m·ªèi": "N·ªôi khoa", "ho": "N·ªôi khoa", "kh√≥ th·ªü": "N·ªôi khoa",
            "ƒëau ng·ª±c": "N·ªôi khoa", "ƒëau kh·ªõp": "N·ªôi khoa", "ti√™u ch·∫£y": "N·ªôi khoa", "bu·ªìn n√¥n": "N·ªôi khoa",
            "ƒëau b·ª•ng": "N·ªôi khoa", "ch√°n ƒÉn": "N·ªôi khoa",
            "ch·∫•n th∆∞∆°ng": "Ngo·∫°i khoa", "g√£y x∆∞∆°ng": "Ngo·∫°i khoa", "v·∫øt th∆∞∆°ng h·ªü": "Ngo·∫°i khoa",
            "ƒëau l∆∞ng": "Ngo·∫°i khoa", "ƒëau vai g√°y": "Ngo·∫°i khoa", "u b∆∞·ªõu ngo√†i da": "Ngo·∫°i khoa",
            "s∆∞ng t·∫•y": "Ngo·∫°i khoa", "ƒëau sau ph·∫´u thu·∫≠t": "Ngo·∫°i khoa",
            "s·ªët ·ªü tr·∫ª em": "Nhi khoa", "ho ·ªü tr·∫ª em": "Nhi khoa", "n√¥n tr·ªõ": "Nhi khoa",
            "kh√≤ kh√®": "Nhi khoa", "bi·∫øng ƒÉn": "Nhi khoa", "ti√™u ch·∫£y ·ªü tr·∫ª em": "Nhi khoa",
            "ph√°t ban": "Nhi khoa", "s·ªï m≈©i": "Nhi khoa",
            "tr·ªÖ kinh": "S·∫£n khoa", "ƒëau b·ª•ng d∆∞·ªõi": "S·∫£n khoa", "ra kh√≠ h∆∞ b·∫•t th∆∞·ªùng": "S·∫£n khoa",
            "ch·∫£y m√°u √¢m ƒë·∫°o": "S·∫£n khoa", "·ªëm ngh√©n": "S·∫£n khoa", "ƒëau l∆∞ng khi mang thai": "S·∫£n khoa",
            "r·ªëi lo·∫°n kinh nguy·ªát": "S·∫£n khoa", "nghi ng·ªù mang thai": "S·∫£n khoa",
            "ƒëau rƒÉng": "RƒÉng H√†m M·∫∑t", "s∆∞ng n∆∞·ªõu": "RƒÉng H√†m M·∫∑t", "h√¥i mi·ªáng": "RƒÉng H√†m M·∫∑t",
            "ch·∫£y m√°u ch√¢n rƒÉng": "RƒÉng H√†m M·∫∑t", "vi√™m l·ª£i": "RƒÉng H√†m M·∫∑t", "s√¢u rƒÉng": "RƒÉng H√†m M·∫∑t",
            "nh·ª©c rƒÉng": "RƒÉng H√†m M·∫∑t", "h√†m l·ªách": "RƒÉng H√†m M·∫∑t",
        }

        specialties = set()
        for symptom in symptoms:
            specialty = symptom_to_specialty.get(symptom.lower(), "T·ªïng qu√°t")
            specialties.add(specialty)

        suggested_specialty = ", ".join(specialties) if specialties else "T·ªïng qu√°t"

        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor(dictionary=True)
            placeholders = ','.join(['%s'] * len(specialties))
            query = f"""
            SELECT bs.maBS, bs.tenBS, ck.tenCK, bs.sdtBS
            FROM bacsi bs
            JOIN chuyenmon cm ON bs.maBS = cm.maBS
            JOIN chuyenkhoa ck ON cm.maCK = ck.maCK
            WHERE ck.tenCK IN ({placeholders})
            """
            cursor.execute(query, tuple(specialties))
            doctors = cursor.fetchall()
            cursor.close()
            conn.close()
        except Error as e:
            dispatcher.utter_message(text=f"L·ªói k·∫øt n·ªëi DB: {e}")
            return []

        if not doctors:
            dispatcher.utter_message(text="R·∫•t ti·∫øc, kh√¥ng t√¨m th·∫•y b√°c sƒ© ph√π h·ª£p.")
            return [SlotSet("specialty_suggested", None)]

        dispatcher.utter_message(
            text=f"""
            <div style="font-family: Arial, sans-serif; font-size: 15px; color: #333; background: #f9fbff; border-radius: 10px; padding: 10px 12px; border: 1px solid #cce0ff;">
                <div style="color: #007bff; font-weight: bold; margin-bottom: 8px;">
                    üîç D·ª±a tr√™n tri·ªáu ch·ª©ng, t√¥i ƒë·ªÅ xu·∫•t chuy√™n khoa <span style="color:#0056b3;">{suggested_specialty}</span>.
                </div>
                <div style="margin-bottom: 6px;">D∆∞·ªõi ƒë√¢y l√† danh s√°ch b√°c sƒ© ph√π h·ª£p:</div>
            </div>
            """, 
            html=True
        )

        for doc in doctors:
            doc_card = f"""
            <div style="font-family: Arial, sans-serif; font-size: 15px; color: #333; background: #ffffff; border-left: 3px solid #007bff; border-radius: 8px; padding: 8px 10px; margin: 6px 0;">
                <div style="font-weight: bold; color: #007bff;">ü©∫ B√°c sƒ© {doc['tenBS']}</div>
                <div><strong>Chuy√™n khoa:</strong> {doc['tenCK']}</div>
                <div><strong>Kinh nghi·ªám:</strong> 10 nƒÉm</div>
                <div><strong>Li√™n h·ªá:</strong> {doc['sdtBS']}</div>
            </div>
            """
            dispatcher.utter_message(
                text=doc_card,
                buttons=[{
                    "title": "üìÖ ƒê·∫∑t l·ªãch", 
                    "payload": f"/book_with_doctor{{\"doctor_id\":\"{doc['maBS']}\", \"specialty\":\"{doc['tenCK']}\"}}"
                }],
                html=True
            )


        return [SlotSet("specialty_suggested", suggested_specialty),
                SlotSet("current_task", None),
                SlotSet("symptoms", None),
                SlotSet("decription", None)]


class ActionBookWithDoctor(Action):
    def name(self) -> Text:
        return "action_book_with_doctor"

    def run(
        self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]
    ) -> List[Dict]:
        # Extract entities t·ª´ latest_message
        entities = tracker.latest_message.get('entities', [])
        doctor_id = next((e['value'] for e in entities if e['entity'] == 'doctor_id'), None)
        specialty = next((e['value'] for e in entities if e['entity'] == 'specialty'), None)
        
        # Fallback parse th·ªß c√¥ng n·∫øu entity fail (t·ª´ text payload)
        if not doctor_id or not specialty:
            text = tracker.latest_message.get('text', '')
            match = re.search(r'"doctor_id":"(BS\d+)"\s*,\s*"specialty":"([^"]+)"', text)
            if match:
                doctor_id, specialty = match.groups()

        if not doctor_id:
            dispatcher.utter_message(text="Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ID b√°c sƒ© t·ª´ l·ª±a ch·ªçn. H√£y th·ª≠ l·∫°i.")
            return []

        # Query DB l·∫•y tenBS v√† verify specialty
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor(dictionary=True)
            query = """
            SELECT tenBS, ck.tenCK as specialty 
            FROM bacsi bs 
            JOIN chuyenmon cm ON bs.maBS = cm.maBS 
            JOIN chuyenkhoa ck ON cm.maCK = ck.maCK 
            WHERE bs.maBS = %s
            """
            cursor.execute(query, (doctor_id,))
            doctor = cursor.fetchone()
            cursor.close()
            conn.close()
        except Error as e:
            dispatcher.utter_message(text=f"L·ªói k·∫øt n·ªëi DB: {e}")
            return []

        if not doctor:
            dispatcher.utter_message(text="Kh√¥ng t√¨m th·∫•y b√°c sƒ© v·ªõi ID n√†y.")
            return []

        doctor_name = doctor['tenBS']
        final_specialty = specialty or doctor['specialty'] or tracker.get_slot("specialty_suggested")

        # RESET slots l·ªôn x·ªôn tr∆∞·ªõc (bao g·ªìm date, time, decription)
        events = [
            SlotSet("doctor_name", None),
            SlotSet("specialty", None),
            SlotSet("date", None),
            SlotSet("appointment_time", None),
            SlotSet("decription", None)
        ]
        
        # Set ƒë√∫ng
        events += [
            SlotSet("doctor_name", doctor_name),
            SlotSet("specialty", final_specialty),
            SlotSet("current_task", "book_appointment")
        ]
        
        # Utter x√°c nh·∫≠n
        dispatcher.utter_message(
            text=f"B·∫°n ƒë√£ ch·ªçn ƒë·∫∑t l·ªãch v·ªõi b√°c sƒ© **{doctor_name}** (chuy√™n khoa {final_specialty}). B√¢y gi·ªù, h√£y cung c·∫•p ng√†y h·∫πn (DD/MM/YYYY)."
        )
        
        return events


class ValidateBookAppointmentForm(FormValidationAction):
    def name(self) -> Text:
        return "validate_book_appointment_form"

    def _detect_wrong_input(self, slot_name: str, slot_value: str) -> bool:
        """Check n·∫øu input match keywords c·ªßa slot kh√°c"""
        input_lower = slot_value.lower()
        keywords = WRONG_INPUT_KEYWORDS.get(slot_name, [])
        return any(kw in input_lower for kw in keywords)

    def _handle_form_interruption(self, dispatcher, tracker):
        latest_message = tracker.latest_message
        
        if hasattr(latest_message, 'intent'):
            latest_intent = latest_message.intent.get('name')
        else:
            latest_intent = latest_message.get('intent', {}).get('name')

        # X·ª≠ l√Ω c√°c interruption
        if latest_intent == "explain_specialty":
            explain_action = ActionExplainSpecialtyInForm()
            explain_action.run(dispatcher, tracker, {})
            return {
                "specialty": tracker.get_slot("specialty"),
                "just_explained": False,
            }
        
        if latest_intent == "ask_doctor_info":
            info_action = ActionShowDoctorInfoInForm()
            info_action.run(dispatcher, tracker, {})
            return {
                "doctor_name": tracker.get_slot("doctor_name"),
                "just_asked_doctor_info": False,
            }
        
        if latest_intent == "list_doctors_by_specialty":
            list_action = ActionListDoctorsInForm()
            list_action.run(dispatcher, tracker, {})
            return {
                "specialty": tracker.get_slot("specialty"),
                "just_listed_doctors": False,
            }

        # === TH√äM M·ªöI: X·ª≠ l√Ω ask_who_examined_me ===
        if latest_intent == "ask_who_examined_me":
            info_action = ActionShowExaminingDoctorInForm()
            info_action.run(dispatcher, tracker, {})
            # Tr·∫£ v·ªÅ slot dummy ƒë·ªÉ form ti·∫øp t·ª•c
            return {"just_asked_examining_doctor": False}
        
        return {}

    def validate_specialty(
        self, slot_value: Any, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]
    ) -> Dict[Text, Any]:
        """Validate chuy√™n khoa - kh√¥ng c√≥ r√†ng bu·ªôc ƒë·∫∑c bi·ªát"""
        
        # === CHECK INTERRUPTION TR∆Ø·ªöC - L·∫§Y GI√Å TR·ªä C≈® ===
        latest_intent = tracker.latest_message.get('intent', {}).get('name')
        old_specialty = tracker.get_slot("specialty")
        
        # N·∫øu l√† intent interruption, x·ª≠ l√Ω v√† gi·ªØ nguy√™n slot c≈©
        if latest_intent in ["explain_specialty", "ask_doctor_info", "list_doctors_by_specialty"]:
            interruption_result = self._handle_form_interruption(dispatcher, tracker)
            if interruption_result:
                # Tr·∫£ v·ªÅ gi√° tr·ªã c≈© thay v√¨ gi√° tr·ªã m·ªõi b·ªã extract sai
                return {"specialty": old_specialty}
        
        # === VALIDATION B√åNH TH∆Ø·ªúNG ===
        if not slot_value:
            dispatcher.utter_message(text="Vui l√≤ng ch·ªçn chuy√™n khoa.")
            return {"specialty": None}

        specialty_input = str(slot_value).strip().lower()
        
        # Detect n·∫øu user h·ªèi thay v√¨ tr·∫£ l·ªùi (fallback detection)
        question_keywords = ["l√† g√¨", "ch·ªØa g√¨", "l√†m g√¨", "c√≥ ph·∫£i", "gi·∫£i th√≠ch", "th√¥ng tin"]
        if any(kw in specialty_input for kw in question_keywords):
            dispatcher.utter_message(
                text="T√¥i nh·∫≠n th·∫•y b·∫°n ƒëang h·ªèi v·ªÅ chuy√™n khoa. "
                     "B·∫°n c√≥ th·ªÉ h·ªèi ri√™ng ho·∫∑c vui l√≤ng ch·ªâ nh·∫≠p T√äN chuy√™n khoa ƒë·ªÉ ƒë·∫∑t l·ªãch.\n"
                     "V√≠ d·ª•: 'n·ªôi khoa', 'nhi khoa', 'th·∫ßn kinh'."
            )
            return {"specialty": old_specialty}
        
        if self._detect_wrong_input('specialty', specialty_input):
            dispatcher.utter_message(
                text="ƒê√≥ c√≥ v·∫ª l√† th√¥ng tin kh√°c. Vui l√≤ng nh·∫≠p t√™n chuy√™n khoa."
            )
            return {"specialty": None}

        # Validate v·ªõi DB
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor(dictionary=True)
            query = "SELECT tenCK, maCK FROM chuyenkhoa WHERE LOWER(tenCK) = %s"
            cursor.execute(query, (specialty_input,))
            result = cursor.fetchone()
            cursor.close()
            conn.close()
        except Error as e:
            dispatcher.utter_message(text=f"L·ªói DB: {e}")
            return {"specialty": None}

        if not result:
            dispatcher.utter_message(text=f"Chuy√™n khoa '{slot_value}' kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng.")
            return {"specialty": None}

        return {"specialty": result['tenCK']}

    def validate_doctor_name(
        self, slot_value: Any, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]
    ) -> Dict[Text, Any]:
        """
        Validate b√°c sƒ© - PH·∫¢I THU·ªòC CHUY√äN KHOA ƒê√É CH·ªåN
        """
        
        # Check interruption
        interruption_result = self._handle_form_interruption(dispatcher, tracker)
        if interruption_result:
            return interruption_result
        
        if not slot_value:
            dispatcher.utter_message(text="Vui l√≤ng ch·ªçn b√°c sƒ©.")
            return {"doctor_name": None}

        doctor_input = str(slot_value).strip()
        if self._detect_wrong_input('doctor_name', doctor_input):
            dispatcher.utter_message(text="ƒê√≥ c√≥ v·∫ª l√† th√¥ng tin kh√°c. Vui l√≤ng nh·∫≠p t√™n b√°c sƒ©.")
            return {"doctor_name": None}

        # L·∫§Y CHUY√äN KHOA ƒê√É CH·ªåN
        specialty = tracker.get_slot("specialty")
        if not specialty:
            dispatcher.utter_message(text="L·ªói: Ch∆∞a c√≥ th√¥ng tin chuy√™n khoa. Vui l√≤ng ch·ªçn l·∫°i t·ª´ ƒë·∫ßu.")
            return {"doctor_name": None}

        # KI·ªÇM TRA B√ÅC Sƒ® PH·∫¢I THU·ªòC CHUY√äN KHOA ƒê√É CH·ªåN
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor(dictionary=True)
            
            # Query ch·ªâ l·∫•y b√°c sƒ© trong chuy√™n khoa ƒë√£ ch·ªçn
            query = """
            SELECT bs.maBS, bs.tenBS, ck.tenCK, bs.sdtBS 
            FROM bacsi bs 
            JOIN chuyenmon cm ON bs.maBS = cm.maBS
            JOIN chuyenkhoa ck ON cm.maCK = ck.maCK 
            WHERE ck.tenCK = %s AND LOWER(bs.tenBS) LIKE %s
            """
            cursor.execute(query, (specialty, f"%{doctor_input.lower()}%"))
            matched = cursor.fetchall()
            
            if not matched:
                # Kh√¥ng t√¨m th·∫•y -> Hi·ªÉn th·ªã danh s√°ch b√°c sƒ© trong chuy√™n khoa
                query_all = """
                SELECT bs.maBS, bs.tenBS, ck.tenCK, bs.sdtBS 
                FROM bacsi bs 
                JOIN chuyenmon cm ON bs.maBS = cm.maBS
                JOIN chuyenkhoa ck ON cm.maCK = ck.maCK 
                WHERE ck.tenCK = %s
                LIMIT 5
                """
                cursor.execute(query_all, (specialty,))
                doctors_in_specialty = cursor.fetchall()
                cursor.close()
                conn.close()
                
                not_found_html = f"""
                <div style="font-family: Arial, sans-serif; background: #fff3cd;
                            border-left: 5px solid #ffc107; border-radius: 8px;
                            padding: 12px 16px; margin-bottom: 10px;">
                    <p style="color: #856404; font-weight: bold; margin: 0 0 6px 0;">
                        ‚ö†Ô∏è B√°c sƒ© "<span style='color:#000;'>{doctor_input}</span>" kh√¥ng thu·ªôc chuy√™n khoa <strong>{specialty}</strong>.
                    </p>
                    <p style="margin: 4px 0;">üëâ Vui l√≤ng ch·ªçn m·ªôt b√°c sƒ© trong danh s√°ch sau:</p>
                </div>
                """
                dispatcher.utter_message(text=not_found_html, metadata={"html": True})

                for doc in doctors_in_specialty:
                    suggestion_html = f"""
                    <div style="background: #ffffff; border: 1px solid #dee2e6;
                                border-radius: 6px; padding: 8px 12px; margin: 6px 0;
                                box-shadow: 0 1px 3px rgba(0,0,0,0.05);">
                        <p style="margin: 0;"><strong>ü©∫ {doc['tenBS']}</strong></p>
                        <p style="margin: 2px 0;">üè• {doc['tenCK']}</p>
                        <p style="margin: 2px 0;">üìû {doc['sdtBS']}</p>
                    </div>
                    """
                    dispatcher.utter_message(text=suggestion_html, metadata={"html": True})

                return {"doctor_name": None}
            
            # T√¨m th·∫•y b√°c sƒ© h·ª£p l·ªá
            doc = matched[0]
            cursor.close()
            conn.close()
            
            confirm_html = f"""
            <div style="font-family: Arial, sans-serif; background: #d1ecf1;
                        border-left: 5px solid #0c5460; border-radius: 8px;
                        padding: 12px 16px;">
                <p style="font-weight: bold; color: #0c5460; margin: 0 0 6px 0;">‚úÖ X√°c nh·∫≠n b√°c sƒ©:</p>
                <p style="margin: 2px 0;"><strong>üë®‚Äç‚öïÔ∏è {doc['tenBS']}</strong></p>
                <p style="margin: 2px 0;">üè• {doc['tenCK']}</p>
                <p style="margin: 2px 0;">üìû {doc['sdtBS']}</p>
            </div>
            """
            dispatcher.utter_message(text=confirm_html, metadata={"html": True})

            return {"doctor_name": doc["tenBS"]}
            
        except Error as e:
            dispatcher.utter_message(text=f"L·ªói DB: {e}")
            return {"doctor_name": None}

    def validate_date(
        self, slot_value: Any, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]
    ) -> Dict[Text, Any]:
        """
        Validate ng√†y kh√°m - PH·∫¢I L√Ä NG√ÄY B√ÅC Sƒ® C√ì L·ªäCH L√ÄM VI·ªÜC V√Ä KH√îNG NGH·ªà
        """
        
        if not slot_value:
            dispatcher.utter_message(text="Vui l√≤ng cung c·∫•p ng√†y h·∫πn.")
            return {"date": None}

        date_input = str(slot_value).strip()
        if self._detect_wrong_input('date', date_input):
            dispatcher.utter_message(text="T√¥i nghƒ© b·∫°n ƒëang m√¥ t·∫£ b·ªánh. Vui l√≤ng nh·∫≠p ng√†y theo ƒë·ªãnh d·∫°ng DD/MM/YYYY.")
            return {"date": None}

        # Parse ng√†y
        try:
            parsed_date = datetime.strptime(date_input, '%d/%m/%Y').date()
        except ValueError:
            dispatcher.utter_message(text="Ng√†y kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p theo ƒë·ªãnh d·∫°ng DD/MM/YYYY.")
            return {"date": None}

        # Ki·ªÉm tra ng√†y trong t∆∞∆°ng lai
        today = datetime.now().date()
        if parsed_date < today:
            dispatcher.utter_message(text="Ng√†y h·∫πn ph·∫£i trong t∆∞∆°ng lai. Vui l√≤ng ch·ªçn ng√†y kh√°c.")
            return {"date": None}

        # L·∫§Y TH√îNG TIN B√ÅC Sƒ®
        doctor_name = tracker.get_slot("doctor_name")
        if not doctor_name:
            dispatcher.utter_message(text="L·ªói: Ch∆∞a c√≥ th√¥ng tin b√°c sƒ©.")
            return {"date": None}

        # KI·ªÇM TRA B√ÅC Sƒ® C√ì L·ªäCH L√ÄM VI·ªÜC TRONG NG√ÄY N√ÄY KH√îNG
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor(dictionary=True)
            
            # L·∫•y maBS
            cursor.execute("SELECT maBS FROM bacsi WHERE tenBS = %s", (doctor_name,))
            bs_result = cursor.fetchone()
            if not bs_result:
                cursor.close()
                conn.close()
                dispatcher.utter_message(text="L·ªói: Kh√¥ng t√¨m th·∫•y m√£ b√°c sƒ©.")
                return {"date": None}
            
            maBS = bs_result['maBS']
            
            # Ki·ªÉm tra l·ªãch l√†m vi·ªác trong ng√†y v√† tr·∫°ng th√°i KH√îNG ph·∫£i "Ngh·ªâ"
            query = """
            SELECT ngaythangnam, giobatdau, gioketthuc, trangthai
            FROM thoigiankham
            WHERE maBS = %s 
              AND DATE(ngaythangnam) = %s 
              AND trangthai != 'Ngh·ªâ'
            ORDER BY giobatdau
            """
            cursor.execute(query, (maBS, parsed_date))
            schedule = cursor.fetchall()
            cursor.close()
            conn.close()
            
            if not schedule:
                dispatcher.utter_message(
                    text=f"‚ùå B√°c sƒ© {doctor_name} kh√¥ng c√≥ l·ªãch l√†m vi·ªác ho·∫∑c ƒëang ngh·ªâ v√†o ng√†y {date_input}.\n"
                         f"Vui l√≤ng ch·ªçn ng√†y kh√°c."
                )
                return {"date": None}
            
            # Hi·ªÉn th·ªã l·ªãch l√†m vi·ªác trong ng√†y
            schedule_html = f"""
            <div style="font-family: Arial, sans-serif; background: #e7f3ff;
                        border-left: 5px solid #007bff; border-radius: 8px;
                        padding: 12px 16px; margin: 10px 0;">
                <p style="font-weight: bold; color: #007bff; margin: 0 0 8px 0;">
                    ‚úÖ B√°c sƒ© {doctor_name} c√≥ l·ªãch l√†m vi·ªác ng√†y {date_input}:
                </p>
            """
            
            for idx, slot in enumerate(schedule, 1):
                schedule_html += f"""
                <div style="background: white; border-radius: 6px; padding: 8px; margin: 4px 0;">
                    <strong>Ca {idx}:</strong> {slot['giobatdau'].strftime('%H:%M')} - {slot['gioketthuc'].strftime('%H:%M')} 
                    <span style="color: green;">(‚úì {slot['trangthai']})</span>
                </div>
                """
            
            schedule_html += """
            </div>
            """
            dispatcher.utter_message(text=schedule_html, metadata={"html": True})
            
            return {"date": date_input}
            
        except Error as e:
            dispatcher.utter_message(text=f"L·ªói DB: {e}")
            return {"date": None}

    def validate_appointment_time(
        self, slot_value: Any, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]
    ) -> Dict[Text, Any]:
        """
        Validate gi·ªù kh√°m - PH·∫¢I N·∫∞M TRONG KHO·∫¢NG giobatdau V√Ä gioketthuc C·ª¶A M·ªòT CA L√ÄM VI·ªÜC
        """
        
        if not slot_value:
            dispatcher.utter_message(text="Vui l√≤ng cung c·∫•p th·ªùi gian h·∫πn.")
            return {"appointment_time": None}

        time_input = str(slot_value).strip()
        if self._detect_wrong_input('appointment_time', time_input):
            dispatcher.utter_message(text="Vui l√≤ng nh·∫≠p th·ªùi gian theo ƒë·ªãnh d·∫°ng HH:MM (v√≠ d·ª•: 14:30).")
            return {"appointment_time": None}

        # Parse th·ªùi gian
        try:
            parsed_time = datetime.strptime(time_input, '%H:%M').time()
        except ValueError:
            dispatcher.utter_message(text="Th·ªùi gian kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p theo ƒë·ªãnh d·∫°ng HH:MM.")
            return {"appointment_time": None}

        # L·∫§Y TH√îNG TIN B√ÅC Sƒ® V√Ä NG√ÄY
        doctor_name = tracker.get_slot("doctor_name")
        date_str = tracker.get_slot("date")
        
        if not doctor_name or not date_str:
            dispatcher.utter_message(text="L·ªói: Thi·∫øu th√¥ng tin b√°c sƒ© ho·∫∑c ng√†y kh√°m.")
            return {"appointment_time": None}

        try:
            parsed_date = datetime.strptime(date_str, '%d/%m/%Y').date()
        except ValueError:
            dispatcher.utter_message(text="L·ªói: Ng√†y kh√°m kh√¥ng h·ª£p l·ªá.")
            return {"appointment_time": None}

        # KI·ªÇM TRA GI·ªú KH√ÅM C√ì N·∫∞M TRONG CA L√ÄM VI·ªÜC N√ÄO KH√îNG
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor(dictionary=True)
            
            # L·∫•y maBS
            cursor.execute("SELECT maBS FROM bacsi WHERE tenBS = %s", (doctor_name,))
            bs_result = cursor.fetchone()
            if not bs_result:
                cursor.close()
                conn.close()
                dispatcher.utter_message(text="L·ªói: Kh√¥ng t√¨m th·∫•y m√£ b√°c sƒ©.")
                return {"appointment_time": None}
            
            maBS = bs_result['maBS']
            
            # L·∫•y c√°c ca l√†m vi·ªác trong ng√†y
            query = """
            SELECT giobatdau, gioketthuc, trangthai
            FROM thoigiankham
            WHERE maBS = %s 
              AND DATE(ngaythangnam) = %s 
              AND trangthai != 'Ngh·ªâ'
            """
            cursor.execute(query, (maBS, parsed_date))
            schedule = cursor.fetchall()
            cursor.close()
            conn.close()
            
            if not schedule:
                dispatcher.utter_message(text="L·ªói: Kh√¥ng t√¨m th·∫•y l·ªãch l√†m vi·ªác cho ng√†y n√†y.")
                return {"appointment_time": None}
            
            # Ki·ªÉm tra gi·ªù c√≥ n·∫±m trong kho·∫£ng n√†o kh√¥ng
            valid_slot = None
            for slot in schedule:
                start_time = slot['giobatdau']
                end_time = slot['gioketthuc']
                
                # Convert to time objects for comparison
                if isinstance(start_time, timedelta):
                    start_time = (datetime.min + start_time).time()
                if isinstance(end_time, timedelta):
                    end_time = (datetime.min + end_time).time()
                
                if start_time <= parsed_time <= end_time:
                    valid_slot = slot
                    break
            
            if not valid_slot:
                # Hi·ªÉn th·ªã c√°c khung gi·ªù h·ª£p l·ªá
                error_html = f"""
                <div style="font-family: Arial, sans-serif; background: #fff3cd;
                            border-left: 5px solid #ffc107; border-radius: 8px;
                            padding: 12px 16px;">
                    <p style="color: #856404; font-weight: bold; margin: 0 0 8px 0;">
                        ‚ö†Ô∏è Gi·ªù {time_input} kh√¥ng n·∫±m trong ca l√†m vi·ªác n√†o c·ªßa b√°c sƒ©.
                    </p>
                    <p style="margin: 4px 0;">üìã C√°c khung gi·ªù h·ª£p l·ªá trong ng√†y {date_str}:</p>
                """
                
                for idx, slot in enumerate(schedule, 1):
                    start = slot['giobatdau']
                    end = slot['gioketthuc']
                    if isinstance(start, timedelta):
                        start = (datetime.min + start).time()
                    if isinstance(end, timedelta):
                        end = (datetime.min + end).time()
                    
                    error_html += f"""
                    <div style="background: white; border-radius: 6px; padding: 6px; margin: 4px 0;">
                        ‚úì Ca {idx}: {start.strftime('%H:%M')} - {end.strftime('%H:%M')}
                    </div>
                    """
                
                error_html += """
                </div>
                """
                dispatcher.utter_message(text=error_html, metadata={"html": True})
                return {"appointment_time": None}
            
            # Th√†nh c√¥ng
            start = valid_slot['giobatdau']
            end = valid_slot['gioketthuc']
            if isinstance(start, timedelta):
                start = (datetime.min + start).time()
            if isinstance(end, timedelta):
                end = (datetime.min + end).time()
            
            success_html = f"""
            <div style="font-family: Arial, sans-serif; background: #d4edda;
                        border-left: 5px solid #28a745; border-radius: 8px;
                        padding: 12px 16px;">
                <p style="color: #155724; font-weight: bold; margin: 0;">
                    ‚úÖ Gi·ªù {time_input} h·ª£p l·ªá (Ca: {start.strftime('%H:%M')} - {end.strftime('%H:%M')})
                </p>
            </div>
            """
            dispatcher.utter_message(text=success_html, metadata={"html": True})
            
            return {"appointment_time": time_input}
            
        except Error as e:
            dispatcher.utter_message(text=f"L·ªói DB: {e}")
            return {"appointment_time": None}

    def validate_decription(
        self, slot_value: Any, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]
    ) -> Dict[Text, Any]:
        """
        Validate m√¥ t·∫£ b·ªánh - SAU ƒê√ì KI·ªÇM TRA TR√ôNG L·ªäCH
        """
        
        if not slot_value:
            dispatcher.utter_message(text="Vui l√≤ng cung c·∫•p m√¥ t·∫£ chi ti·∫øt v·ªÅ t√¨nh tr·∫°ng c·ªßa b·∫°n.")
            return {"decription": None}

        desc_input = str(slot_value).strip()
        if self._detect_wrong_input('decription', desc_input):
            dispatcher.utter_message(text="Vui l√≤ng m√¥ t·∫£ b·ªánh chi ti·∫øt.")
            return {"decription": None}

        if len(desc_input) < 5:
            dispatcher.utter_message(text="M√¥ t·∫£ qu√° ng·∫Øn. Vui l√≤ng cung c·∫•p th√™m chi ti·∫øt.")
            return {"decription": None}

        # ========== KI·ªÇM TRA TR√ôNG L·ªäCH ==========
        doctor_name = tracker.get_slot("doctor_name")
        date_str = tracker.get_slot("date")
        appointment_time_str = tracker.get_slot("appointment_time")
        
        if not all([doctor_name, date_str, appointment_time_str]):
            dispatcher.utter_message(text="L·ªói: Thi·∫øu th√¥ng tin ƒë·ªÉ ki·ªÉm tra tr√πng l·ªãch.")
            return {"decription": None}

        try:
            parsed_date = datetime.strptime(date_str, '%d/%m/%Y').date()
            parsed_time = datetime.strptime(appointment_time_str, '%H:%M').time()
        except ValueError:
            dispatcher.utter_message(text="L·ªói: Ng√†y ho·∫∑c gi·ªù kh√¥ng h·ª£p l·ªá.")
            return {"decription": None}

        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor(dictionary=True)
            
            # L·∫•y maBS
            cursor.execute("SELECT maBS FROM bacsi WHERE tenBS = %s", (doctor_name,))
            bs_result = cursor.fetchone()
            if not bs_result:
                cursor.close()
                conn.close()
                return {"decription": desc_input}
            
            maBS = bs_result['maBS']
            
            # L·∫•y ca l√†m vi·ªác ch·ª©a gi·ªù kh√°m n√†y
            query_slot = """
            SELECT giobatdau, gioketthuc
            FROM thoigiankham
            WHERE maBS = %s 
              AND DATE(ngaythangnam) = %s 
              AND trangthai != 'Ngh·ªâ'
            """
            cursor.execute(query_slot, (maBS, parsed_date))
            slots = cursor.fetchall()
            
            target_slot = None
            for slot in slots:
                start = slot['giobatdau']
                end = slot['gioketthuc']
                if isinstance(start, timedelta):
                    start = (datetime.min + start).time()
                if isinstance(end, timedelta):
                    end = (datetime.min + end).time()
                
                if start <= parsed_time <= end:
                    target_slot = {'start': start, 'end': end}
                    break
            
            if not target_slot:
                cursor.close()
                conn.close()
                return {"decription": desc_input}
            
            # Ki·ªÉm tra xem ƒë√£ c√≥ l·ªãch n√†o trong c√πng ca n√†y ch∆∞a
            query_duplicate = """
            SELECT lh.mahen, lh.khunggio
            FROM lichhen lh
            WHERE lh.maBN = %s 
              AND lh.maBS = %s
              AND DATE(lh.ngaythangnam) = %s
              AND lh.trangthai != 'h·ªßy'
            """
            cursor.execute(query_duplicate, (MA_BN_GLOBAL, maBS, parsed_date))
            existing_appointments = cursor.fetchall()
            
            cursor.close()
            conn.close()
            
            # Ki·ªÉm tra xem c√≥ l·ªãch n√†o c√πng ca kh√¥ng
            for appt in existing_appointments:
                existing_time_str = appt['khunggio']
                try:
                    # Parse existing time (c√≥ th·ªÉ l√† string ho·∫∑c time object)
                    if isinstance(existing_time_str, str):
                        existing_time = datetime.strptime(existing_time_str, '%H:%M').time()
                    elif isinstance(existing_time_str, timedelta):
                        existing_time = (datetime.min + existing_time_str).time()
                    else:
                        existing_time = existing_time_str
                    
                    # Ki·ªÉm tra xem existing_time c√≥ n·∫±m trong c√πng ca kh√¥ng
                    if target_slot['start'] <= existing_time <= target_slot['end']:
                        warning_html = f"""
                        <div style="font-family: Arial, sans-serif; background: #f8d7da;
                                    border-left: 5px solid #dc3545; border-radius: 8px;
                                    padding: 12px 16px;">
                            <p style="color: #721c24; font-weight: bold; margin: 0 0 8px 0;">
                                ‚ùå B·∫°n ƒë√£ c√≥ l·ªãch h·∫πn v·ªõi b√°c sƒ© {doctor_name} trong ca n√†y!
                            </p>
                            <p style="margin: 4px 0;">
                                üìÖ Ng√†y: {date_str}<br>
                                üïê Gi·ªù ƒë√£ ƒë·∫∑t: {existing_time.strftime('%H:%M')}<br>
                                üïê Gi·ªù b·∫°n mu·ªën ƒë·∫∑t: {appointment_time_str}<br>
                                ‚è∞ C√πng ca: {target_slot['start'].strftime('%H:%M')} - {target_slot['end'].strftime('%H:%M')}
                            </p>
                            <p style="margin: 8px 0 0 0; font-weight: bold;">
                                Vui l√≤ng ch·ªçn ca kh√°c ho·∫∑c ng√†y kh√°c ƒë·ªÉ tr√°nh tr√πng l·∫∑p.
                            </p>
                        </div>
                        """
                        dispatcher.utter_message(text=warning_html, metadata={"html": True})
                        return {"decription": None}
                
                except Exception as e:
                    print(f"[WARNING] Error parsing existing appointment time: {e}")
                    continue
            
            # Kh√¥ng c√≥ tr√πng l·ªãch -> OK
            return {"decription": desc_input}
            
        except Error as e:
            dispatcher.utter_message(text=f"L·ªói DB khi ki·ªÉm tra tr√πng l·ªãch: {e}")
            return {"decription": None}


class ActionBookAppointment(Action):
    def name(self) -> Text:
        return "action_book_appointment"

    def run(self, dispatcher, tracker, domain):
        slots = {
            "doctor_name": tracker.get_slot("doctor_name"),
            "specialty": tracker.get_slot("specialty"),
            "date": tracker.get_slot("date"),
            "appointment_time": tracker.get_slot("appointment_time"),
            "decription": tracker.get_slot("decription")
        }
        if not all(slots.values()):
            dispatcher.utter_message(text="Th√¥ng tin ch∆∞a ƒë·∫ßy ƒë·ªß. Vui l√≤ng ho√†n t·∫•t form.")
            return []

        dispatcher.utter_message(
            text=f"""
            <div style="font-family: Arial, sans-serif; font-size: 15px; color: #333;
                        background: #f8f9fa; border-left: 4px solid #0d6efd; border-radius: 8px;
                        padding: 12px 14px; margin: 6px 0;">
                <div style="font-weight: bold; color: #0d6efd; margin-bottom: 6px;">
                    ‚úÖ X√°c nh·∫≠n th√¥ng tin ƒë·∫∑t l·ªãch
                </div>
                <div><strong>B√°c sƒ©:</strong> {slots['doctor_name']}</div>
                <div><strong>Chuy√™n khoa:</strong> {slots['specialty']}</div>
                <div><strong>Th·ªùi gian:</strong> {slots['appointment_time']} ng√†y {slots['date']}</div>
                <div><strong>M√¥ t·∫£:</strong> {slots['decription']}</div>
                <div style="margin-top: 8px;">üëâ Vui l√≤ng x√°c nh·∫≠n ƒë·ªÉ ho√†n t·∫•t ƒë·∫∑t l·ªãch.</div>
            </div>
            """,
            buttons=[
                {"title": "‚úÖ X√°c nh·∫≠n", "payload": "/affirm"},
                {"title": "‚ùå H·ªßy", "payload": "/deny"}
            ],
            metadata={"html": True}
        )

        return []  # Kh√¥ng reset ngay, ch·ªù affirm/deny qua rules


# Ph·∫ßn m·ªõi: Tra c·ª©u th√¥ng tin b√°c sƒ©
class ActionSearchDoctor(Action):
    def name(self) -> Text:
        return "action_search_doctor"

    def run(
        self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]
    ) -> List[Dict]:
        doctor_name_search = tracker.get_slot("doctor_name")  # Reuse doctor_name slot for search
        if not doctor_name_search:
            dispatcher.utter_message(text="Kh√¥ng nh·∫≠n ƒë∆∞·ª£c t√™n b√°c sƒ© ƒë·ªÉ tra c·ª©u. H√£y th·ª≠ l·∫°i.")
            return [SlotSet("doctor_name", None)]

        # Query MySQL ƒë·ªÉ t√¨m b√°c sƒ© matching t√™n (LIKE %name%)
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor(dictionary=True)
            query = """
            SELECT bs.maBS, bs.tenBS, ck.tenCK, bs.sdtBS
            FROM bacsi bs
            JOIN chuyenmon cm ON bs.maBS = cm.maBS
            JOIN chuyenkhoa ck ON cm.maCK = ck.maCK
            WHERE bs.tenBS LIKE %s
            """
            cursor.execute(query, (f"%{doctor_name_search}%",))
            doctors = cursor.fetchall()
            cursor.close()
            conn.close()
        except Error as e:
            dispatcher.utter_message(text=f"L·ªói k·∫øt n·ªëi DB: {e}")
            return [SlotSet("doctor_name", None)]

        if not doctors:
            dispatcher.utter_message(text=f"Kh√¥ng t√¨m th·∫•y b√°c sƒ© n√†o c√≥ t√™n ch·ª©a '{doctor_name_search}'. H√£y th·ª≠ t√™n kh√°c.")
            return [SlotSet("doctor_name", None)]

        dispatcher.utter_message(
            text=f"""
            <div style="font-family: Arial, sans-serif; font-size: 15px; color: #333;">
                <div style="font-weight: bold; color: #0d6efd; margin-bottom: 8px;">
                    üîç T√¨m th·∫•y {len(doctors)} b√°c sƒ© ph√π h·ª£p v·ªõi t·ª´ kh√≥a "<span style='color:#dc3545;'>{doctor_name_search}</span>":
                </div>
            </div>
            """,
            metadata={"html": True}
        )

        for doc in doctors:
            doc_card = f"""
                <div style="background: #f8f9fa; border-left: 4px solid #0d6efd;
                            border-radius: 8px; padding: 10px 14px; margin-bottom: 8px;">
                    <div style="font-weight: bold; color: #0d6efd; margin-bottom: 4px;">
                        ü©∫ B√°c sƒ© {doc['tenBS']}
                    </div>
                    <div><strong>Chuy√™n khoa:</strong> {doc['tenCK']}</div>
                    <div><strong>SƒêT:</strong> {doc['sdtBS']}</div>
                </div>
            """
            dispatcher.utter_message(
                text=doc_card,
                buttons=[
                    {
                        "title": "üìÑ Xem chi ti·∫øt",
                        "payload": f"/view_doctor_detail{{\"doctor_id\":\"{doc['maBS']}\"}}"
                    }
                ],
                metadata={"html": True}
            )

        return [SlotSet("current_task", None),
                SlotSet("doctor_name", None)]


class ActionViewDoctorDetail(Action):
    def name(self) -> Text:
        return "action_view_doctor_detail"

    def run(
        self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]
    ) -> List[Dict]:
        # L·∫•y doctor_id t·ª´ latest_message entities (gi·∫£ s·ª≠ NLU extract entity doctor_id t·ª´ payload)
        entities = tracker.latest_message.get('entities', [])
        doctor_id = next((e['value'] for e in entities if e['entity'] == 'doctor_id'), None)
        
        if not doctor_id:
            dispatcher.utter_message(text="Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ID b√°c sƒ©. H√£y th·ª≠ l·∫°i.")
            return []

        # Query MySQL ƒë·ªÉ l·∫•y chi ti·∫øt b√°c sƒ© theo maBS (th√™m fields n·∫øu c√≥: email, kinhnghiem, dia_chi, etc.)
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor(dictionary=True)
            query = """
            SELECT bs.maBS, bs.tenBS, ck.tenCK, bs.sdtBS, bs.emailBS
            FROM bacsi bs
            JOIN chuyenmon cm ON bs.maBS = cm.maBS
            JOIN chuyenkhoa ck ON cm.maCK = ck.maCK
            WHERE bs.maBS = %s
            """
            cursor.execute(query, (doctor_id,))
            doctor = cursor.fetchone()
            cursor.close()
            conn.close()
        except Error as e:
            dispatcher.utter_message(text=f"L·ªói k·∫øt n·ªëi DB: {e}")
            return []

        if not doctor:
            dispatcher.utter_message(text="Kh√¥ng t√¨m th·∫•y th√¥ng tin b√°c sƒ©.")
            return []

        # Utter chi ti·∫øt
        detail_html = f"""
        <div style="font-family: Arial, sans-serif; background-color: #f8f9fa;
                    border-radius: 10px; border-left: 5px solid #0d6efd;
                    padding: 14px 18px; max-width: 420px; box-shadow: 0 2px 6px rgba(0,0,0,0.1);">
            <h3 style="color: #0d6efd; margin-top: 0; margin-bottom: 8px;">üìã Th√¥ng tin chi ti·∫øt b√°c sƒ©</h3>
            <p style="margin: 4px 0;"><strong>üë®‚Äç‚öïÔ∏è H·ªç t√™n:</strong> {doctor['tenBS']}</p>
            <p style="margin: 4px 0;"><strong>üÜî M√£ BS:</strong> {doctor['maBS']}</p>
            <p style="margin: 4px 0;"><strong>üè• Chuy√™n khoa:</strong> {doctor['tenCK']}</p>
            <p style="margin: 4px 0;"><strong>üìû SƒêT:</strong> {doctor['sdtBS']}</p>
            <p style="margin: 4px 0;"><strong>üìß Email:</strong> {doctor.get('emailBS', 'Ch∆∞a c√≥ th√¥ng tin')}</p>
            <p style="margin: 4px 0;"><strong>üíº Kinh nghi·ªám:</strong> 20 nƒÉm</p>
            <p style="margin: 4px 0;"><strong>ü©∫ D·ªãch v·ª•:</strong> T∆∞ v·∫•n v√† kh√°m chuy√™n s√¢u v·ªÅ {doctor['tenCK']}.</p>
            <hr style="border: none; border-top: 1px solid #dee2e6; margin: 10px 0;">
            <p style="font-weight: bold; color: #333;">B·∫°n c√≥ mu·ªën ƒë·∫∑t l·ªãch v·ªõi b√°c sƒ© n√†y kh√¥ng?</p>
        </div>
        """

        buttons = [
            {"title": "üìÖ ƒê·∫∑t l·ªãch", "payload": "/book_appointment"},
            {"title": "üîç T√¨m b√°c sƒ© kh√°c", "payload": "/search_doctor_info"}
        ]

        dispatcher.utter_message(text=detail_html, buttons=buttons, metadata={"html": True})


        return []


class ActionSearchSpecialty(Action):
    def name(self) -> Text:
        return "action_search_specialty"

    def run(
        self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]
    ) -> List[Dict]:
        print(f"[DEBUG] action_search_specialty START")
        print(f"[DEBUG] just_explained = {tracker.get_slot('just_explained')}")
        
        entities = tracker.latest_message.get('entities', [])
        specialty_entity = next((ent['value'] for ent in entities if ent['entity'] == 'specialty'), None)
        specialty = specialty_entity or tracker.get_slot("specialty") 

        if not specialty:
            dispatcher.utter_message(text="Vui l√≤ng nh·∫≠p t√™n chuy√™n khoa b·∫°n mu·ªën tra c·ª©u.")
            return [SlotSet("just_explained", False), FollowupAction("book_appointment_form")]

        # Query DB...
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor(dictionary=True)
            query = "SELECT tenCK, mo_ta FROM chuyenkhoa WHERE tenCK = %s"
            cursor.execute(query, (specialty,))
            result = cursor.fetchone()
            cursor.close()
            conn.close()
        except Error as e:
            dispatcher.utter_message(text=f"L·ªói DB: {e}")
            return [SlotSet("just_explained", False), FollowupAction("book_appointment_form")]

        if not result:
            dispatcher.utter_message(text=f"Kh√¥ng t√¨m th·∫•y '{specialty}'.")
            return [
                SlotSet("just_explained", False),
                SlotSet("specialty", None),
                FollowupAction("book_appointment_form")
            ]

        # Explain
        explanation = result.get('mo_ta', f"Chuy√™n khoa {specialty}...")
        dispatcher.utter_message(text=f"üìã **{specialty.title()}**\n{explanation}\n\nTi·∫øp t·ª•c ƒë·∫∑t l·ªãch...")

        print(f"[DEBUG] action_search_specialty DONE, reactivating form")
        
        # Reactivate form with FollowupAction
        return [
            SlotSet("just_explained", False),
            SlotSet("specialty", specialty),
            FollowupAction("book_appointment_form")  # ‚Üê Force reactivate!
        ]


# class ActionSearchPrescription(Action):
#     def name(self) -> Text:
#         return "action_search_prescription"

#     def run(
#         self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]
#     ) -> List[Dict]:
#         prescription_date = tracker.get_slot("prescription_date")
#         if not prescription_date:
#             dispatcher.utter_message(
#                 text="Vui l√≤ng nh·∫≠p ng√†y b·∫°n mu·ªën tra c·ª©u toa thu·ªëc (ƒë·ªãnh d·∫°ng DD/MM/YYYY).",
#                 buttons=[{"title": "Quay l·∫°i menu", "payload": "/greet"}]
#             )
#             return [SlotSet("prescription_date", None)]

#         # Parse ng√†y
#         try:
#             parsed_date = datetime.strptime(prescription_date, '%d/%m/%Y').date()
#         except ValueError:
#             dispatcher.utter_message(text="Ng√†y kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p theo ƒë·ªãnh d·∫°ng DD/MM/YYYY.")
#             return [SlotSet("prescription_date", None)]

#         # Query MySQL: L·∫•y toa thu·ªëc c·ªßa maBN trong ng√†y ƒë√≥
#         try:
#             conn = mysql.connector.connect(**DB_CONFIG)
#             cursor = conn.cursor(dictionary=True)
#             query = """
#             SELECT maTT, ngay_ke, noi_dung_toa
#             FROM toa_thuoc
#             WHERE maBN = %s AND DATE(ngay_ke) = %s
#             ORDER BY ngay_ke
#             """
#             cursor.execute(query, (MA_BN_GLOBAL, parsed_date))
#             prescriptions = cursor.fetchall()
#             cursor.close()
#             conn.close()
#         except Error as e:
#             dispatcher.utter_message(text=f"L·ªói k·∫øt n·ªëi DB: {e}")
#             return [SlotSet("prescription_date", None)]

#         if not prescriptions:
#             dispatcher.utter_message(text=f"Kh√¥ng c√≥ toa thu·ªëc n√†o trong ng√†y {prescription_date}.")
#             buttons = [{"title": "Quay l·∫°i menu", "payload": "/greet"}]
#             dispatcher.utter_message(text="B·∫°n c√≥ mu·ªën tra c·ª©u ng√†y kh√°c kh√¥ng?", buttons=buttons)
#             return [SlotSet("prescription_date", None)]

#         # Hi·ªÉn th·ªã danh s√°ch toa thu·ªëc
#         dispatcher.utter_message(text=f"Toa thu·ªëc ng√†y {prescription_date}:")
#         for rx in prescriptions:
#             rx_text = f"üìã Toa thu·ªëc ID {rx['maTT']} - Ng√†y k√™: {rx['ngay_ke']}\nN·ªôi dung: {rx['noi_dung_toa']}"
#             dispatcher.utter_message(text=rx_text)

#         buttons = [{"title": "Tra c·ª©u ng√†y kh√°c", "payload": "/search_prescription"}, {"title": "Quay l·∫°i menu", "payload": "/greet"}]
#         dispatcher.utter_message(text="B·∫°n c√≥ mu·ªën tra c·ª©u th√™m kh√¥ng?", buttons=buttons)

#         return [SlotSet("prescription_date", None)]


class ActionSubmitBooking(Action):
    def name(self) -> Text:
        return "action_submit_booking"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]) -> List[Dict]:
        doctor_name = tracker.get_slot("doctor_name")
        specialty = tracker.get_slot("specialty")
        date_str = tracker.get_slot("date")
        appointment_time = tracker.get_slot("appointment_time")
        decription = tracker.get_slot("decription")

        if not all([doctor_name, specialty, date_str, appointment_time, decription]):
            dispatcher.utter_message(text="Th√¥ng tin ch∆∞a ƒë·∫ßy ƒë·ªß. Vui l√≤ng ho√†n t·∫•t form.")
            return []

        try:
            parsed_date = datetime.strptime(date_str, '%d/%m/%Y').date()
        except ValueError:
            dispatcher.utter_message(text="Ng√†y kh√¥ng h·ª£p l·ªá.")
            return []

        # L·∫•y maBS t·ª´ tenBS
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor(dictionary=True)
            query = "SELECT maBS FROM bacsi WHERE tenBS = %s"
            cursor.execute(query, (doctor_name,))
            bs_result = cursor.fetchone()
            if not bs_result:
                dispatcher.utter_message(text="Kh√¥ng t√¨m th·∫•y b√°c sƒ©.")
                cursor.close()
                conn.close()
                return []
            maBS = bs_result['maBS']
            cursor.close()
            conn.close()
        except Error as e:
            dispatcher.utter_message(text=f"L·ªói DB: {e}")
            return []

        # T·∫°o mahen
        now = datetime.now()
        mahen = f"LH{now.strftime('%Y%m%d%H%M%S')}"

        # Insert v√†o DB
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            query = """
            INSERT INTO lichhen (mahen, maBN, maBS, ngaythangnam, khunggio, trangthai, maCK)
            VALUES (%s, %s, %s, %s, %s, %s, %s)
            """
            cursor.execute(query, (mahen, MA_BN_GLOBAL, maBS, parsed_date, appointment_time, 'ch·ªù', decription))
            conn.commit()
            cursor.close()
            conn.close()
            dispatcher.utter_message(text="ƒê·∫∑t l·ªãch th√†nh c√¥ng! C·∫£m ∆°n b·∫°n.")
        except Error as e:
            dispatcher.utter_message(text=f"L·ªói ƒë·∫∑t l·ªãch: {e}")
            return []

        # Reset slots
        events = [
            SlotSet("current_task", None),
            SlotSet("doctor_name", None),
            SlotSet("specialty", None),
            SlotSet("date", None),
            SlotSet("appointment_time", None),
            SlotSet("decription", None)
        ]
        return events


class ActionResetBooking(Action):
    def name(self) -> Text:
        return "action_reset_booking"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]) -> List[Dict]:
        dispatcher.utter_message(text="ƒê√£ h·ªßy y√™u c·∫ßu ƒë·∫∑t l·ªãch. B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu l·∫°i.")
        events = [
            SlotSet("current_task", None),
            SlotSet("doctor_name", None),
            SlotSet("specialty", None),
            SlotSet("date", None),
            SlotSet("appointment_time", None),
            SlotSet("decription", None)
        ]
        return events


class ActionResetCancel(Action):
    def name(self) -> Text:
        return "action_reset_cancel"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]) -> List[Dict]:
        dispatcher.utter_message(text="ƒê√£ h·ªßy h√†nh ƒë·ªông h·ªßy l·ªãch. L·ªãch h·∫πn v·∫´n gi·ªØ nguy√™n.")
        events = [
            SlotSet("selected_appointment_id", None),
            SlotSet("current_task", None),
            SlotSet("appointment_date", None)
        ]
        return events

# ================================ T√åM TOA THU·ªêC ============================

class ValidateSearchPrescriptionForm(FormValidationAction):
    """Validation cho search_prescription_form v·ªõi h·ªó tr·ª£ interruption"""
    
    def name(self) -> Text:
        return "validate_search_prescription_form"

    def _handle_form_interruption(self, dispatcher, tracker):
        """X·ª≠ l√Ω interruption trong prescription form"""
        latest_message = tracker.latest_message
        
        if hasattr(latest_message, 'intent'):
            latest_intent = latest_message.intent.get('name')
        else:
            latest_intent = latest_message.get('intent', {}).get('name')

        # === X·ª≠ l√Ω explain_specialty ===
        if latest_intent == "explain_specialty":
            explain_action = ActionExplainSpecialtyInForm()
            explain_action.run(dispatcher, tracker, {})
            return {
                "prescription_date": tracker.get_slot("prescription_date"),
                "just_explained": False,
            }
        
        # === X·ª≠ l√Ω ask_doctor_info ===
        if latest_intent == "ask_doctor_info":
            info_action = ActionShowDoctorInfoInForm()
            info_action.run(dispatcher, tracker, {})
            return {
                "prescription_date": tracker.get_slot("prescription_date"),
                "just_asked_doctor_info": False,
            }
        
        # === X·ª≠ l√Ω list_doctors_by_specialty ===
        if latest_intent == "list_doctors_by_specialty":
            list_action = ActionListDoctorsInForm()
            list_action.run(dispatcher, tracker, {})
            return {
                "prescription_date": tracker.get_slot("prescription_date"),
                "just_listed_doctors": False,
            }
        
        # === TH√äM M·ªöI: X·ª≠ l√Ω ask_who_examined_me ===
        if latest_intent == "ask_who_examined_me":
            info_action = ActionShowExaminingDoctorInForm()
            info_action.run(dispatcher, tracker, {})
            # Tr·∫£ v·ªÅ slot dummy ƒë·ªÉ form ti·∫øp t·ª•c
            return {"just_asked_examining_doctor": False}

        return {}

    def validate_prescription_date(
        self, 
        slot_value: Any, 
        dispatcher: CollectingDispatcher, 
        tracker: Tracker, 
        domain: Dict[Text, Any]
    ) -> Dict[Text, Any]:
        """Validate ng√†y kh√°m ƒë·ªÉ tra c·ª©u toa thu·ªëc"""
        
        # === CHECK INTERRUPTION TR∆Ø·ªöC ===
        interruption_result = self._handle_form_interruption(dispatcher, tracker)
        if interruption_result:
            return interruption_result
        
        # Ki·ªÉm tra n·∫øu user mu·ªën t√¨m toa thu·ªëc m·ªõi nh·∫•t
        if tracker.get_slot("search_latest_prescription"):
            # B·ªè qua validation, ƒë·ªÉ action_get_latest_prescription x·ª≠ l√Ω
            return {"prescription_date": "latest"}
        
        # === VALIDATION B√åNH TH∆Ø·ªúNG ===
        if not slot_value:
            dispatcher.utter_message(text="Vui l√≤ng cung c·∫•p ng√†y kh√°m b·∫°n mu·ªën tra c·ª©u toa thu·ªëc (DD/MM/YYYY).")
            return {"prescription_date": None}

        date_input = str(slot_value).strip()
        
        # Validate format
        try:
            parsed_date = datetime.strptime(date_input, '%d/%m/%Y').date()
        except ValueError:
            dispatcher.utter_message(
                text="Ng√†y kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p theo ƒë·ªãnh d·∫°ng DD/MM/YYYY.\nV√≠ d·ª•: 15/10/2025"
            )
            return {"prescription_date": None}

        # Kh√¥ng c·∫ßn ki·ªÉm tra ng√†y trong qu√° kh·ª© v√¨ tra c·ª©u toa thu·ªëc c√≥ th·ªÉ l√† ng√†y c≈©
        
        return {"prescription_date": date_input}


class ActionSearchPrescription(Action):
    """Action kh·ªüi t·∫°o search prescription form - CH·ªà set context"""
    
    def name(self) -> Text:
        return "action_search_prescription"

    def run(
        self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]
    ) -> List[Dict]:
        # CH·ªà set context, KH√îNG utter message
        return [
            SlotSet("current_task", "search_prescription"),
            SlotSet("prescription_date", None),
            SlotSet("search_latest_prescription", False)
        ]


class ActionGetLatestPrescription(Action):
    """Action l·∫•y toa thu·ªëc m·ªõi nh·∫•t"""
    
    def name(self) -> Text:
        return "action_get_latest_prescription"

    def run(
        self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]
    ) -> List[Dict]:
        
        # Set flag ƒë·ªÉ form bi·∫øt ƒë√¢y l√† t√¨m toa thu·ªëc m·ªõi nh·∫•t
        return [
            SlotSet("search_latest_prescription", True),
            SlotSet("prescription_date", "latest")
        ]


class ActionShowPrescriptionResults(Action):
    """Action hi·ªÉn th·ªã k·∫øt qu·∫£ t√¨m toa thu·ªëc (sau khi form ho√†n t·∫•t)"""
    
    def name(self) -> Text:
        return "action_show_prescription_results"

    def run(
        self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]
    ) -> List[Dict]:
        
        prescription_date = tracker.get_slot("prescription_date")
        search_latest = tracker.get_slot("search_latest_prescription")
        
        if not prescription_date and not search_latest:
            dispatcher.utter_message(text="Kh√¥ng c√≥ th√¥ng tin ng√†y kh√°m ho·∫∑c y√™u c·∫ßu t√¨m toa thu·ªëc.")
            return []

        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor(dictionary=True)
            
            if search_latest or prescription_date == "latest":
                # T√¨m toa thu·ªëc m·ªõi nh·∫•t
                query = """
                SELECT 
                    lk.maLanKham,
                    lk.ngaythangnamkham,
                    t.tenThuoc,
                    tt.lieuluong,
                    tt.soluong,
                    tt.donvi,
                    tt.thoigianSD
                FROM lankham lk
                JOIN hosobenhnhan hs ON lk.maHS = hs.maHS
                JOIN toathuoc tt ON lk.maLanKham = tt.maLanKham
                JOIN thuoc t ON tt.maThuoc = t.maThuoc
                WHERE hs.maBN = %s
                ORDER BY lk.ngaythangnamkham DESC
                LIMIT 20
                """
                cursor.execute(query, (MA_BN_GLOBAL,))
                prescriptions = cursor.fetchall()
                
                if not prescriptions:
                    dispatcher.utter_message(
                        text="Kh√¥ng t√¨m th·∫•y toa thu·ªëc n√†o trong h·ªì s∆° c·ªßa b·∫°n."
                    )
                    cursor.close()
                    conn.close()
                    return self._reset_slots()
                
                # L·∫•y ng√†y kh√°m m·ªõi nh·∫•t
                latest_date = prescriptions[0]['ngaythangnamkham']
                title = f"Toa thu·ªëc m·ªõi nh·∫•t (Ng√†y kh√°m: {latest_date.strftime('%d/%m/%Y')})"
                
            else:
                # T√¨m toa thu·ªëc theo ng√†y c·ª• th·ªÉ
                parsed_date = datetime.strptime(prescription_date, '%d/%m/%Y').date()
                
                query = """
                SELECT 
                    lk.maLanKham,
                    lk.ngaythangnamkham,
                    t.tenThuoc,
                    tt.lieuluong,
                    tt.soluong,
                    tt.donvi,
                    tt.thoigianSD
                FROM lankham lk
                JOIN hosobenhnhan hs ON lk.maHS = hs.maHS
                JOIN toathuoc tt ON lk.maLanKham = tt.maLanKham
                JOIN thuoc t ON tt.maThuoc = t.maThuoc
                WHERE hs.maBN = %s AND DATE(lk.ngaythangnamkham) = %s
                ORDER BY t.tenThuoc
                """
                cursor.execute(query, (MA_BN_GLOBAL, parsed_date))
                prescriptions = cursor.fetchall()
                
                if not prescriptions:
                    dispatcher.utter_message(
                        text=f"Kh√¥ng t√¨m th·∫•y toa thu·ªëc n√†o trong ng√†y {prescription_date}."
                    )
                    buttons = [
                        {"title": "üìã Xem toa thu·ªëc m·ªõi nh·∫•t", "payload": "/request_latest_prescription"},
                        {"title": "üìÖ T√¨m theo ng√†y kh√°c", "payload": "/search_prescription"},
                        {"title": "üè† Quay l·∫°i menu", "payload": "/greet"}
                    ]
                    dispatcher.utter_message(
                        text="B·∫°n c√≥ mu·ªën th·ª≠ c√°ch kh√°c kh√¥ng?", 
                        buttons=buttons
                    )
                    cursor.close()
                    conn.close()
                    return self._reset_slots()
                
                title = f"Toa thu·ªëc ng√†y {prescription_date}"
            
            cursor.close()
            conn.close()
            
            # Hi·ªÉn th·ªã k·∫øt qu·∫£ b·∫±ng HTML table
            self._display_prescription_table(dispatcher, prescriptions, title)
            
            # Offer next action
            buttons = [
                {"title": "üìÖ T√¨m toa thu·ªëc kh√°c", "payload": "/search_prescription"},
                {"title": "üìÖ ƒê·∫∑t l·ªãch h·∫πn", "payload": "/book_appointment"},
                {"title": "üè† Quay l·∫°i menu", "payload": "/greet"}
            ]
            dispatcher.utter_message(text="B·∫°n c√≥ mu·ªën l√†m g√¨ ti·∫øp theo?", buttons=buttons)
            
            return self._reset_slots()
            
        except Error as e:
            dispatcher.utter_message(text=f"‚ùå L·ªói k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu: {e}")
            return self._reset_slots()

    def _display_prescription_table(self, dispatcher, prescriptions, title):
        """Hi·ªÉn th·ªã toa thu·ªëc d∆∞·ªõi d·∫°ng b·∫£ng HTML"""
        
        # T·∫°o HTML table v·ªõi styling ƒë·∫πp
        html_table = f"""
        <style>
            .prescription-container {{
                font-family: Arial, sans-serif;
                max-width: 800px;
                margin: 10px 0;
            }}
            .prescription-title {{
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                padding: 12px 16px;
                border-radius: 8px 8px 0 0;
                font-weight: bold;
                font-size: 16px;
            }}
            .prescription-table {{
                width: 100%;
                border-collapse: collapse;
                background: white;
                box-shadow: 0 2px 8px rgba(0,0,0,0.1);
                border-radius: 0 0 8px 8px;
                overflow: hidden;
            }}
            .prescription-table thead {{
                background: #f8f9fa;
            }}
            .prescription-table th {{
                padding: 12px 8px;
                text-align: left;
                font-weight: bold;
                color: #495057;
                border-bottom: 2px solid #dee2e6;
                font-size: 14px;
            }}
            .prescription-table td {{
                padding: 10px 8px;
                border-bottom: 1px solid #e9ecef;
                font-size: 14px;
                color: #333;
            }}
            .prescription-table tr:last-child td {{
                border-bottom: none;
            }}
            .prescription-table tr:hover {{
                background: #f8f9fa;
            }}
            .medicine-name {{
                font-weight: 600;
                color: #667eea;
            }}
            .dosage {{
                color: #28a745;
                font-weight: 500;
            }}
            .prescription-footer {{
                background: #f8f9fa;
                padding: 10px 16px;
                border-radius: 0 0 8px 8px;
                margin-top: -1px;
                font-size: 13px;
                color: #6c757d;
                border-top: 2px solid #dee2e6;
            }}
            @media screen and (max-width: 600px) {{
                .prescription-table th,
                .prescription-table td {{
                    font-size: 12px;
                    padding: 8px 6px;
                }}
                .prescription-title {{
                    font-size: 14px;
                }}
            }}
        </style>
        
        <div class="prescription-container">
            <div class="prescription-title">
                üíä {title}
            </div>
            <table class="prescription-table">
                <thead>
                    <tr>
                        <th>STT</th>
                        <th>T√™n thu·ªëc</th>
                        <th>Li·ªÅu l∆∞·ª£ng</th>
                        <th>S·ªë l∆∞·ª£ng</th>
                        <th>ƒê∆°n v·ªã</th>
                        <th>Th·ªùi gian SD</th>
                    </tr>
                </thead>
                <tbody>
        """
        
        # Th√™m c√°c d√≤ng d·ªØ li·ªáu
        for idx, med in enumerate(prescriptions, 1):
            html_table += f"""
                    <tr>
                        <td>{idx}</td>
                        <td class="medicine-name">{med['tenThuoc']}</td>
                        <td class="dosage">{med['lieuluong']}</td>
                        <td>{med['soluong']}</td>
                        <td>{med['donvi']}</td>
                        <td>{med['thoigianSD']}</td>
                    </tr>
            """
        
        html_table += f"""
                </tbody>
            </table>
            <div class="prescription-footer">
                <strong>T·ªïng s·ªë thu·ªëc:</strong> {len(prescriptions)} lo·∫°i | 
                <strong>M√£ l·∫ßn kh√°m:</strong> {prescriptions[0]['maLanKham']}
            </div>
        </div>
        """
        
        dispatcher.utter_message(text=html_table)

    def _reset_slots(self):
        """Reset c√°c slots sau khi ho√†n th√†nh"""
        return [
            SlotSet("prescription_date", None),
            SlotSet("search_latest_prescription", False),
            SlotSet("current_task", None)
        ]


class ActionSetCurrentTask(Action):
    def name(self) -> Text:
        return "action_set_current_task"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]) -> List[Dict]:
        intent = tracker.latest_message['intent'].get('name', '')
        if intent == 'request_doctor':
            return [SlotSet("current_task", "request_doctor")]
        elif intent == 'book_appointment':
            return [SlotSet("current_task", "book_appointment")]
        elif intent == 'cancel_appointment':
            return [SlotSet("current_task", "cancel_appointment")]
        elif intent == 'search_prescription':  # ‚Üê TH√äM M·ªöI
            return [SlotSet("current_task", "search_prescription")]
        return []


class ActionHandleDeny(Action):
    """
    Custom Action ƒë·ªÉ x·ª≠ l√Ω intent 'deny': D·ª´ng t·∫•t c·∫£ forms active, reset slots li√™n quan,
    v√† ƒë∆∞a bot v·ªÅ tr·∫°ng th√°i m·∫∑c ƒë·ªãnh (v√≠ d·ª•: ch√†o h·ªèi ho·∫∑c menu ch√≠nh).
    """
    def name(self) -> Text:
        return "action_handle_deny"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]) -> List[Dict]:
        # Utter th√¥ng b√°o h·ªßy
        dispatcher.utter_message(
            text="ƒê√£ h·ªßy y√™u c·∫ßu hi·ªán t·∫°i. B·∫°n c√≥ mu·ªën l√†m g√¨ kh√°c kh√¥ng? (V√≠ d·ª•: ƒë·∫∑t l·ªãch m·ªõi, tra c·ª©u l·ªãch h·∫πn, ho·∫∑c ch√†o h·ªèi ƒë·ªÉ quay v·ªÅ menu ch√≠nh.)"
        )
        
        # Deactivate form hi·ªán t·∫°i (n·∫øu c√≥)
        events = [ActiveLoop(None)]
        
        # Reset slots chung cho c√°c task (t√πy theo current_task)
        current_task = tracker.get_slot("current_task")
        if current_task == "book_appointment":
            events += [
                SlotSet("doctor_name", None),
                SlotSet("specialty", None),
                SlotSet("date", None),
                SlotSet("appointment_time", None),
                SlotSet("decription", None),
                SlotSet("just_listed_doctors", None),
                SlotSet("just_explained", None),
                SlotSet("just_asked_doctor_info", None)
            ]
        elif current_task == "cancel_appointment":
            events += [
                SlotSet("selected_appointment_id", None),
                SlotSet("appointment_date", None)
            ]
        elif current_task == "search_prescription":  # ‚Üê TH√äM M·ªöI
            events += [
                SlotSet("prescription_date", None),
                SlotSet("search_latest_prescription", False)
            ]
        
        # Reset current_task v√† requested_slot
        events += [
            SlotSet("current_task", None),
            SlotSet("requested_slot", None)
        ]
        
        return events
